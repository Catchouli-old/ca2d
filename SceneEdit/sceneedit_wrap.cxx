/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGLUA
#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN int SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN int SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN int SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN int  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BitMask swig_types[0]
#define SWIGTYPE_p_EntityId swig_types[1]
#define SWIGTYPE_p_GLenum swig_types[2]
#define SWIGTYPE_p_GLint swig_types[3]
#define SWIGTYPE_p_GLuint swig_types[4]
#define SWIGTYPE_p_Gwen__Color swig_types[5]
#define SWIGTYPE_p_Gwen__Controls__Canvas swig_types[6]
#define SWIGTYPE_p_Gwen__Font swig_types[7]
#define SWIGTYPE_p_Gwen__Input__SDL2Input swig_types[8]
#define SWIGTYPE_p_Gwen__Point swig_types[9]
#define SWIGTYPE_p_Gwen__Rect swig_types[10]
#define SWIGTYPE_p_Gwen__Renderer__SDL2Renderer swig_types[11]
#define SWIGTYPE_p_Gwen__String swig_types[12]
#define SWIGTYPE_p_Gwen__Texture swig_types[13]
#define SWIGTYPE_p_Gwen__WindowProvider swig_types[14]
#define SWIGTYPE_p_LuaValue swig_types[15]
#define SWIGTYPE_p_SDL_Event swig_types[16]
#define SWIGTYPE_p_SDL_GLContext swig_types[17]
#define SWIGTYPE_p_SDL_Window swig_types[18]
#define SWIGTYPE_p_SceneEdit swig_types[19]
#define SWIGTYPE_p_ca2d__Camera swig_types[20]
#define SWIGTYPE_p_ca2d__Colour swig_types[21]
#define SWIGTYPE_p_ca2d__ConsoleSystem swig_types[22]
#define SWIGTYPE_p_ca2d__File swig_types[23]
#define SWIGTYPE_p_ca2d__GLBufferDeleter swig_types[24]
#define SWIGTYPE_p_ca2d__GLBufferObject swig_types[25]
#define SWIGTYPE_p_ca2d__GLShader swig_types[26]
#define SWIGTYPE_p_ca2d__GLShaderDeleter swig_types[27]
#define SWIGTYPE_p_ca2d__GLShaderProgram swig_types[28]
#define SWIGTYPE_p_ca2d__GLShaderProgramDeleter swig_types[29]
#define SWIGTYPE_p_ca2d__GLTexture2D swig_types[30]
#define SWIGTYPE_p_ca2d__Game swig_types[31]
#define SWIGTYPE_p_ca2d__LuaEngine swig_types[32]
#define SWIGTYPE_p_ca2d__LuaReference swig_types[33]
#define SWIGTYPE_p_ca2d__LuaValue swig_types[34]
#define SWIGTYPE_p_ca2d__OpenGLWindow swig_types[35]
#define SWIGTYPE_p_ca2d__SDLContextDeleter swig_types[36]
#define SWIGTYPE_p_ca2d__SDLWindowDeleter swig_types[37]
#define SWIGTYPE_p_ca2d__Vertex2D swig_types[38]
#define SWIGTYPE_p_coment__BitIndexOutOfBounds swig_types[39]
#define SWIGTYPE_p_coment__BitcountOutOfRange swig_types[40]
#define SWIGTYPE_p_coment__BitsetT_32_t swig_types[41]
#define SWIGTYPE_p_coment__CompMapUnregistered swig_types[42]
#define SWIGTYPE_p_coment__Component swig_types[43]
#define SWIGTYPE_p_coment__ComponentManager swig_types[44]
#define SWIGTYPE_p_coment__ComponentTypeManager swig_types[45]
#define SWIGTYPE_p_coment__DeadEntity swig_types[46]
#define SWIGTYPE_p_coment__Entity swig_types[47]
#define SWIGTYPE_p_coment__EntityInfo swig_types[48]
#define SWIGTYPE_p_coment__EntityManager swig_types[49]
#define SWIGTYPE_p_coment__EntityProcessingSystem swig_types[50]
#define SWIGTYPE_p_coment__EntitySystem swig_types[51]
#define SWIGTYPE_p_coment__GroupManager swig_types[52]
#define SWIGTYPE_p_coment__IndexOutOfBounds swig_types[53]
#define SWIGTYPE_p_coment__Manager swig_types[54]
#define SWIGTYPE_p_coment__ManagerManager swig_types[55]
#define SWIGTYPE_p_coment__NotImplemented swig_types[56]
#define SWIGTYPE_p_coment__Scene swig_types[57]
#define SWIGTYPE_p_coment__SystemManager swig_types[58]
#define SWIGTYPE_p_coment__TagManager swig_types[59]
#define SWIGTYPE_p_coment__UninitialisedEntity swig_types[60]
#define SWIGTYPE_p_coment__VariableManager swig_types[61]
#define SWIGTYPE_p_coment__World swig_types[62]
#define SWIGTYPE_p_glm__mat4 swig_types[63]
#define SWIGTYPE_p_glm__quat swig_types[64]
#define SWIGTYPE_p_glm__vec2 swig_types[65]
#define SWIGTYPE_p_glm__vec3 swig_types[66]
#define SWIGTYPE_p_glm__vec4 swig_types[67]
#define SWIGTYPE_p_lua_State swig_types[68]
#define SWIGTYPE_p_pointer swig_types[69]
#define SWIGTYPE_p_std__mutex swig_types[70]
#define SWIGTYPE_p_std__shared_ptrT_void_t swig_types[71]
#define SWIGTYPE_p_std__string swig_types[72]
#define SWIGTYPE_p_std__tr1__unordered_mapT_std__string_int_t swig_types[73]
#define SWIGTYPE_p_std__unordered_mapT_std__string_EntitySystem_p_t swig_types[74]
#define SWIGTYPE_p_std__unordered_mapT_std__string_std__shared_ptrT_void_t_t swig_types[75]
#define SWIGTYPE_p_std__unordered_mapT_std__string_std__vectorT_coment__Entity_t_t swig_types[76]
#define SWIGTYPE_p_std__unordered_mapT_std__string_unsigned_int_t swig_types[77]
#define SWIGTYPE_p_std__unordered_mapT_std__type_index_std__shared_ptrT_coment__Manager_t_t swig_types[78]
#define SWIGTYPE_p_std__vectorT_coment__Entity_t swig_types[79]
#define SWIGTYPE_p_uint32_t swig_types[80]
#define SWIGTYPE_p_uint8_t swig_types[81]
#define SWIGTYPE_p_unsigned_int swig_types[82]
static swig_type_info *swig_types[84];
static swig_module_info swig_module = {swig_types, 83, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "engine"
#define SWIG_init      luaopen_engine
#define SWIG_init_user luaopen_engine_user

#define SWIG_LUACODE   luaopen_engine_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}

 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\Component.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\Component.inl.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\ComponentType.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\Entity.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\Entity.inl.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\EntityId.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\EntityInfo.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\World.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\World.inl.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\exceptions\BitcountOutOfRange.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\exceptions\BitIndexOutOfBounds.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\exceptions\CompMapUnregistered.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\exceptions\DeadEntity.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\exceptions\IndexOutOfBounds.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\exceptions\NotImplemented.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\exceptions\UninitialisedEntity.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\ComponentManager.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\ComponentManager.inl.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\ComponentTypeManager.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\ComponentTypeManager.inl.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\EntityManager.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\GroupManager.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\Manager.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\ManagerManager.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\ManagerManager.inl.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\SystemManager.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\SystemManager.inl.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\TagManager.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\VariableManager.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\managers\VariableManager.inl.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\scenes\Scene.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\systems\EntityProcessingSystem.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\systems\EntitySystem.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\systems\EntitySystem.inl.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\utils\BitMask.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\utils\Bitset.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\utils\Functions.h" 
#include "C:\Projects\VS\ca2d\coment\coment\include\coment\utils\Functions.inl.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\app\Game.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\app\OpenGLWindow.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\game\systems\ConsoleSystem.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\gltypes\GLBufferObject.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\gltypes\GLShader.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\gltypes\GLShaderProgram.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\gltypes\GLTexture2D.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\gwen\SDL2Input.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\gwen\SDL2Renderer.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\maths\Colour.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\maths\Maths.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\rendering\Camera.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\rendering\OpenGL.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\rendering\Vertex.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\resources\File.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\scripting\LuaEngine.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\scripting\LuaEngine.inl.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\scripting\LuaReference.h" 
#include "C:\Projects\VS\ca2d\ca2d\include\scripting\LuaValue.h" 
#include "C:\Projects\VS\ca2d\SceneEdit\include\app\SceneEdit.h" 
using namespace coment; 
using namespace ca2d; 


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_Component(lua_State* L) {
  int SWIG_arg = 0;
  coment::Component *result = 0 ;
  
  SWIG_check_num_args("coment::Component::Component",0,0)
  result = (coment::Component *)new coment::Component();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__Component,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Component(void *obj) {
coment::Component *arg1 = (coment::Component *) obj;
delete arg1;
}
static int _proxy__wrap_new_Component(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Component);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Component_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Component_methods[]= {
    {0,0}
};
static swig_lua_method swig_Component_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Component_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Component_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Component_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Component_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Component_Sf_SwigStatic = {
    "Component",
    swig_Component_Sf_SwigStatic_methods,
    swig_Component_Sf_SwigStatic_attributes,
    swig_Component_Sf_SwigStatic_constants,
    swig_Component_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Component_bases[] = {0};
static const char *swig_Component_base_names[] = {0};
static swig_lua_class _wrap_class_Component = { "Component", "Component", &SWIGTYPE_p_coment__Component,_proxy__wrap_new_Component, swig_delete_Component, swig_Component_methods, swig_Component_attributes, &swig_Component_Sf_SwigStatic, swig_Component_meta, swig_Component_bases, swig_Component_base_names };

static int _wrap_new_Entity(lua_State* L) {
  int SWIG_arg = 0;
  coment::Entity *result = 0 ;
  
  SWIG_check_num_args("coment::Entity::Entity",0,0)
  result = (coment::Entity *)new coment::Entity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__Entity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity___eq(lua_State* L) {
  int SWIG_arg = 0;
  coment::Entity *arg1 = (coment::Entity *) 0 ;
  coment::Entity *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("coment::Entity::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::Entity::operator ==",1,"coment::Entity const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::Entity::operator ==",2,"coment::Entity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("Entity___eq",1,SWIGTYPE_p_coment__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("Entity___eq",2,SWIGTYPE_p_coment__Entity);
  }
  
  result = (bool)((coment::Entity const *)arg1)->operator ==((coment::Entity const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_isValid(lua_State* L) {
  int SWIG_arg = 0;
  coment::Entity *arg1 = (coment::Entity *) 0 ;
  bool result;
  
  SWIG_check_num_args("coment::Entity::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::Entity::isValid",1,"coment::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("Entity_isValid",1,SWIGTYPE_p_coment__Entity);
  }
  
  result = (bool)((coment::Entity const *)arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getId(lua_State* L) {
  int SWIG_arg = 0;
  coment::Entity *arg1 = (coment::Entity *) 0 ;
  EntityId result;
  
  SWIG_check_num_args("coment::Entity::getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::Entity::getId",1,"coment::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("Entity_getId",1,SWIGTYPE_p_coment__Entity);
  }
  
  result = ((coment::Entity const *)arg1)->getId();
  {
    EntityId * resultptr = new EntityId((const EntityId &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_EntityId,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getUniqueId(lua_State* L) {
  int SWIG_arg = 0;
  coment::Entity *arg1 = (coment::Entity *) 0 ;
  EntityId result;
  
  SWIG_check_num_args("coment::Entity::getUniqueId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::Entity::getUniqueId",1,"coment::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("Entity_getUniqueId",1,SWIGTYPE_p_coment__Entity);
  }
  
  result = ((coment::Entity const *)arg1)->getUniqueId();
  {
    EntityId * resultptr = new EntityId((const EntityId &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_EntityId,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getWorld(lua_State* L) {
  int SWIG_arg = 0;
  coment::Entity *arg1 = (coment::Entity *) 0 ;
  coment::World *result = 0 ;
  
  SWIG_check_num_args("coment::Entity::getWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::Entity::getWorld",1,"coment::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("Entity_getWorld",1,SWIGTYPE_p_coment__Entity);
  }
  
  result = (coment::World *)((coment::Entity const *)arg1)->getWorld();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__World,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Entity(void *obj) {
coment::Entity *arg1 = (coment::Entity *) obj;
delete arg1;
}
static int _proxy__wrap_new_Entity(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Entity);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Entity_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Entity_methods[]= {
    { "__eq", _wrap_Entity___eq},
    { "isValid", _wrap_Entity_isValid},
    { "getId", _wrap_Entity_getId},
    { "getUniqueId", _wrap_Entity_getUniqueId},
    { "getWorld", _wrap_Entity_getWorld},
    {0,0}
};
static swig_lua_method swig_Entity_meta[] = {
    { "__eq", _wrap_Entity___eq},
    {0,0}
};

static swig_lua_attribute swig_Entity_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Entity_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Entity_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Entity_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Entity_Sf_SwigStatic = {
    "Entity",
    swig_Entity_Sf_SwigStatic_methods,
    swig_Entity_Sf_SwigStatic_attributes,
    swig_Entity_Sf_SwigStatic_constants,
    swig_Entity_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Entity_bases[] = {0};
static const char *swig_Entity_base_names[] = {0};
static swig_lua_class _wrap_class_Entity = { "Entity", "Entity", &SWIGTYPE_p_coment__Entity,_proxy__wrap_new_Entity, swig_delete_Entity, swig_Entity_methods, swig_Entity_attributes, &swig_Entity_Sf_SwigStatic, swig_Entity_meta, swig_Entity_bases, swig_Entity_base_names };

static int _wrap_new_EntityInfo(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityInfo *result = 0 ;
  
  SWIG_check_num_args("coment::EntityInfo::EntityInfo",0,0)
  result = (coment::EntityInfo *)new coment::EntityInfo();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__EntityInfo,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityInfo_toEntity(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityInfo *arg1 = (coment::EntityInfo *) 0 ;
  coment::Entity result;
  
  SWIG_check_num_args("coment::EntityInfo::toEntity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityInfo::toEntity",1,"coment::EntityInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("EntityInfo_toEntity",1,SWIGTYPE_p_coment__EntityInfo);
  }
  
  result = ((coment::EntityInfo const *)arg1)->toEntity();
  {
    coment::Entity * resultptr = new coment::Entity((const coment::Entity &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_coment__Entity,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityInfo_compareComponentBitmask(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityInfo *arg1 = (coment::EntityInfo *) 0 ;
  BitMask *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("coment::EntityInfo::compareComponentBitmask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityInfo::compareComponentBitmask",1,"coment::EntityInfo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::EntityInfo::compareComponentBitmask",2,"BitMask const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("EntityInfo_compareComponentBitmask",1,SWIGTYPE_p_coment__EntityInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BitMask,0))){
    SWIG_fail_ptr("EntityInfo_compareComponentBitmask",2,SWIGTYPE_p_BitMask);
  }
  
  result = (bool)((coment::EntityInfo const *)arg1)->compareComponentBitmask((BitMask const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityInfo_compareSystemBitmask(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityInfo *arg1 = (coment::EntityInfo *) 0 ;
  BitMask *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("coment::EntityInfo::compareSystemBitmask",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityInfo::compareSystemBitmask",1,"coment::EntityInfo const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::EntityInfo::compareSystemBitmask",2,"BitMask const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("EntityInfo_compareSystemBitmask",1,SWIGTYPE_p_coment__EntityInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BitMask,0))){
    SWIG_fail_ptr("EntityInfo_compareSystemBitmask",2,SWIGTYPE_p_BitMask);
  }
  
  result = (bool)((coment::EntityInfo const *)arg1)->compareSystemBitmask((BitMask const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityInfo_removeComponents(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityInfo *arg1 = (coment::EntityInfo *) 0 ;
  
  SWIG_check_num_args("coment::EntityInfo::removeComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityInfo::removeComponents",1,"coment::EntityInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("EntityInfo_removeComponents",1,SWIGTYPE_p_coment__EntityInfo);
  }
  
  (arg1)->removeComponents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityInfo_getId(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityInfo *arg1 = (coment::EntityInfo *) 0 ;
  coment::EntityId result;
  
  SWIG_check_num_args("coment::EntityInfo::getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityInfo::getId",1,"coment::EntityInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("EntityInfo_getId",1,SWIGTYPE_p_coment__EntityInfo);
  }
  
  result = (coment::EntityId)((coment::EntityInfo const *)arg1)->getId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityInfo_getUniqueId(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityInfo *arg1 = (coment::EntityInfo *) 0 ;
  coment::EntityId result;
  
  SWIG_check_num_args("coment::EntityInfo::getUniqueId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityInfo::getUniqueId",1,"coment::EntityInfo const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("EntityInfo_getUniqueId",1,SWIGTYPE_p_coment__EntityInfo);
  }
  
  result = (coment::EntityId)((coment::EntityInfo const *)arg1)->getUniqueId();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EntityInfo(void *obj) {
coment::EntityInfo *arg1 = (coment::EntityInfo *) obj;
delete arg1;
}
static int _proxy__wrap_new_EntityInfo(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EntityInfo);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EntityInfo_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntityInfo_methods[]= {
    { "toEntity", _wrap_EntityInfo_toEntity},
    { "compareComponentBitmask", _wrap_EntityInfo_compareComponentBitmask},
    { "compareSystemBitmask", _wrap_EntityInfo_compareSystemBitmask},
    { "removeComponents", _wrap_EntityInfo_removeComponents},
    { "getId", _wrap_EntityInfo_getId},
    { "getUniqueId", _wrap_EntityInfo_getUniqueId},
    {0,0}
};
static swig_lua_method swig_EntityInfo_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EntityInfo_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EntityInfo_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntityInfo_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EntityInfo_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntityInfo_Sf_SwigStatic = {
    "EntityInfo",
    swig_EntityInfo_Sf_SwigStatic_methods,
    swig_EntityInfo_Sf_SwigStatic_attributes,
    swig_EntityInfo_Sf_SwigStatic_constants,
    swig_EntityInfo_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntityInfo_bases[] = {0};
static const char *swig_EntityInfo_base_names[] = {0};
static swig_lua_class _wrap_class_EntityInfo = { "EntityInfo", "EntityInfo", &SWIGTYPE_p_coment__EntityInfo,_proxy__wrap_new_EntityInfo, swig_delete_EntityInfo, swig_EntityInfo_methods, swig_EntityInfo_attributes, &swig_EntityInfo_Sf_SwigStatic, swig_EntityInfo_meta, swig_EntityInfo_bases, swig_EntityInfo_base_names };

static int _wrap_new_World(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *result = 0 ;
  
  SWIG_check_num_args("coment::World::World",0,0)
  result = (coment::World *)new coment::World();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__World,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_createEntity(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  coment::Entity result;
  
  SWIG_check_num_args("coment::World::createEntity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::createEntity",1,"coment::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_createEntity",1,SWIGTYPE_p_coment__World);
  }
  
  result = (arg1)->createEntity();
  {
    coment::Entity * resultptr = new coment::Entity((const coment::Entity &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_coment__Entity,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_isAlive(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  coment::Entity *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("coment::World::isAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::isAlive",1,"coment::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::World::isAlive",2,"coment::Entity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_isAlive",1,SWIGTYPE_p_coment__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("World_isAlive",2,SWIGTYPE_p_coment__Entity);
  }
  
  result = (bool)(arg1)->isAlive((coment::Entity const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_remove(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  coment::Entity *arg2 = 0 ;
  
  SWIG_check_num_args("coment::World::remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::remove",1,"coment::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::World::remove",2,"coment::Entity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_remove",1,SWIGTYPE_p_coment__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("World_remove",2,SWIGTYPE_p_coment__Entity);
  }
  
  (arg1)->remove((coment::Entity const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_refresh(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  coment::Entity *arg2 = 0 ;
  
  SWIG_check_num_args("coment::World::refresh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::refresh",1,"coment::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::World::refresh",2,"coment::Entity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_refresh",1,SWIGTYPE_p_coment__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("World_refresh",2,SWIGTYPE_p_coment__Entity);
  }
  
  (arg1)->refresh((coment::Entity const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_removeComponents(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  coment::Entity *arg2 = 0 ;
  
  SWIG_check_num_args("coment::World::removeComponents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::removeComponents",1,"coment::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::World::removeComponents",2,"coment::Entity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_removeComponents",1,SWIGTYPE_p_coment__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("World_removeComponents",2,SWIGTYPE_p_coment__Entity);
  }
  
  (arg1)->removeComponents((coment::Entity const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_setTag(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  coment::Entity *arg2 = 0 ;
  std::string arg3 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("coment::World::setTag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::setTag",1,"coment::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::World::setTag",2,"coment::Entity const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("coment::World::setTag",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_setTag",1,SWIGTYPE_p_coment__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("World_setTag",2,SWIGTYPE_p_coment__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("World_setTag",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  (arg1)->setTag((coment::Entity const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_getTag(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  coment::Entity *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("coment::World::getTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::getTag",1,"coment::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::World::getTag",2,"coment::Entity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_getTag",1,SWIGTYPE_p_coment__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("World_getTag",2,SWIGTYPE_p_coment__Entity);
  }
  
  result = (arg1)->getTag((coment::Entity const &)*arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_getEntitiesByTag(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  std::vector< coment::Entity > *result = 0 ;
  
  SWIG_check_num_args("coment::World::getEntitiesByTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::getEntitiesByTag",1,"coment::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::World::getEntitiesByTag",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_getEntitiesByTag",1,SWIGTYPE_p_coment__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("World_getEntitiesByTag",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (std::vector< coment::Entity > *) &(arg1)->getEntitiesByTag(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_coment__Entity_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_addGroup(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  coment::Entity *arg2 = 0 ;
  std::string arg3 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("coment::World::addGroup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::addGroup",1,"coment::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::World::addGroup",2,"coment::Entity const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("coment::World::addGroup",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_addGroup",1,SWIGTYPE_p_coment__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("World_addGroup",2,SWIGTYPE_p_coment__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("World_addGroup",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  (arg1)->addGroup((coment::Entity const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_removeGroup(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  coment::Entity *arg2 = 0 ;
  std::string arg3 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("coment::World::removeGroup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::removeGroup",1,"coment::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::World::removeGroup",2,"coment::Entity const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("coment::World::removeGroup",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_removeGroup",1,SWIGTYPE_p_coment__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("World_removeGroup",2,SWIGTYPE_p_coment__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("World_removeGroup",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  (arg1)->removeGroup((coment::Entity const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_removeGroups(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  coment::Entity *arg2 = 0 ;
  
  SWIG_check_num_args("coment::World::removeGroups",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::removeGroups",1,"coment::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::World::removeGroups",2,"coment::Entity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_removeGroups",1,SWIGTYPE_p_coment__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("World_removeGroups",2,SWIGTYPE_p_coment__Entity);
  }
  
  (arg1)->removeGroups((coment::Entity const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_isInGroup(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  coment::Entity *arg2 = 0 ;
  std::string arg3 ;
  std::string *argp3 ;
  bool result;
  
  SWIG_check_num_args("coment::World::isInGroup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::isInGroup",1,"coment::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::World::isInGroup",2,"coment::Entity const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("coment::World::isInGroup",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_isInGroup",1,SWIGTYPE_p_coment__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("World_isInGroup",2,SWIGTYPE_p_coment__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("World_isInGroup",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->isInGroup((coment::Entity const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_getEntitiesByGroup(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  std::vector< coment::Entity > *result = 0 ;
  
  SWIG_check_num_args("coment::World::getEntitiesByGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::getEntitiesByGroup",1,"coment::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::World::getEntitiesByGroup",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_getEntitiesByGroup",1,SWIGTYPE_p_coment__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("World_getEntitiesByGroup",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (std::vector< coment::Entity > *) &(arg1)->getEntitiesByGroup(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_coment__Entity_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_setDelta(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("coment::World::setDelta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::setDelta",1,"coment::World *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("coment::World::setDelta",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_setDelta",1,SWIGTYPE_p_coment__World);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setDelta(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_getDelta(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  float result;
  
  SWIG_check_num_args("coment::World::getDelta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::getDelta",1,"coment::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_getDelta",1,SWIGTYPE_p_coment__World);
  }
  
  result = (float)(arg1)->getDelta();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_update(lua_State* L) {
  int SWIG_arg = 0;
  coment::World *arg1 = (coment::World *) 0 ;
  
  SWIG_check_num_args("coment::World::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::World::update",1,"coment::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__World,0))){
    SWIG_fail_ptr("World_update",1,SWIGTYPE_p_coment__World);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_World(void *obj) {
coment::World *arg1 = (coment::World *) obj;
delete arg1;
}
static int _proxy__wrap_new_World(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_World);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_World_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_World_methods[]= {
    { "createEntity", _wrap_World_createEntity},
    { "isAlive", _wrap_World_isAlive},
    { "remove", _wrap_World_remove},
    { "refresh", _wrap_World_refresh},
    { "removeComponents", _wrap_World_removeComponents},
    { "setTag", _wrap_World_setTag},
    { "getTag", _wrap_World_getTag},
    { "getEntitiesByTag", _wrap_World_getEntitiesByTag},
    { "addGroup", _wrap_World_addGroup},
    { "removeGroup", _wrap_World_removeGroup},
    { "removeGroups", _wrap_World_removeGroups},
    { "isInGroup", _wrap_World_isInGroup},
    { "getEntitiesByGroup", _wrap_World_getEntitiesByGroup},
    { "setDelta", _wrap_World_setDelta},
    { "getDelta", _wrap_World_getDelta},
    { "update", _wrap_World_update},
    {0,0}
};
static swig_lua_method swig_World_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_World_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_World_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_World_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_World_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_World_Sf_SwigStatic = {
    "World",
    swig_World_Sf_SwigStatic_methods,
    swig_World_Sf_SwigStatic_attributes,
    swig_World_Sf_SwigStatic_constants,
    swig_World_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_World_bases[] = {0};
static const char *swig_World_base_names[] = {0};
static swig_lua_class _wrap_class_World = { "World", "World", &SWIGTYPE_p_coment__World,_proxy__wrap_new_World, swig_delete_World, swig_World_methods, swig_World_attributes, &swig_World_Sf_SwigStatic, swig_World_meta, swig_World_bases, swig_World_base_names };

static int _wrap_new_BitcountOutOfRange(lua_State* L) {
  int SWIG_arg = 0;
  coment::BitcountOutOfRange *result = 0 ;
  
  SWIG_check_num_args("coment::BitcountOutOfRange::BitcountOutOfRange",0,0)
  result = (coment::BitcountOutOfRange *)new coment::BitcountOutOfRange();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__BitcountOutOfRange,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BitcountOutOfRange(void *obj) {
coment::BitcountOutOfRange *arg1 = (coment::BitcountOutOfRange *) obj;
delete arg1;
}
static int _proxy__wrap_new_BitcountOutOfRange(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BitcountOutOfRange);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BitcountOutOfRange_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BitcountOutOfRange_methods[]= {
    {0,0}
};
static swig_lua_method swig_BitcountOutOfRange_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BitcountOutOfRange_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BitcountOutOfRange_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BitcountOutOfRange_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BitcountOutOfRange_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BitcountOutOfRange_Sf_SwigStatic = {
    "BitcountOutOfRange",
    swig_BitcountOutOfRange_Sf_SwigStatic_methods,
    swig_BitcountOutOfRange_Sf_SwigStatic_attributes,
    swig_BitcountOutOfRange_Sf_SwigStatic_constants,
    swig_BitcountOutOfRange_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BitcountOutOfRange_bases[] = {0};
static const char *swig_BitcountOutOfRange_base_names[] = {0};
static swig_lua_class _wrap_class_BitcountOutOfRange = { "BitcountOutOfRange", "BitcountOutOfRange", &SWIGTYPE_p_coment__BitcountOutOfRange,_proxy__wrap_new_BitcountOutOfRange, swig_delete_BitcountOutOfRange, swig_BitcountOutOfRange_methods, swig_BitcountOutOfRange_attributes, &swig_BitcountOutOfRange_Sf_SwigStatic, swig_BitcountOutOfRange_meta, swig_BitcountOutOfRange_bases, swig_BitcountOutOfRange_base_names };

static int _wrap_new_BitIndexOutOfBounds(lua_State* L) {
  int SWIG_arg = 0;
  coment::BitIndexOutOfBounds *result = 0 ;
  
  SWIG_check_num_args("coment::BitIndexOutOfBounds::BitIndexOutOfBounds",0,0)
  result = (coment::BitIndexOutOfBounds *)new coment::BitIndexOutOfBounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__BitIndexOutOfBounds,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BitIndexOutOfBounds(void *obj) {
coment::BitIndexOutOfBounds *arg1 = (coment::BitIndexOutOfBounds *) obj;
delete arg1;
}
static int _proxy__wrap_new_BitIndexOutOfBounds(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BitIndexOutOfBounds);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BitIndexOutOfBounds_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BitIndexOutOfBounds_methods[]= {
    {0,0}
};
static swig_lua_method swig_BitIndexOutOfBounds_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BitIndexOutOfBounds_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BitIndexOutOfBounds_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BitIndexOutOfBounds_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BitIndexOutOfBounds_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BitIndexOutOfBounds_Sf_SwigStatic = {
    "BitIndexOutOfBounds",
    swig_BitIndexOutOfBounds_Sf_SwigStatic_methods,
    swig_BitIndexOutOfBounds_Sf_SwigStatic_attributes,
    swig_BitIndexOutOfBounds_Sf_SwigStatic_constants,
    swig_BitIndexOutOfBounds_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BitIndexOutOfBounds_bases[] = {0};
static const char *swig_BitIndexOutOfBounds_base_names[] = {0};
static swig_lua_class _wrap_class_BitIndexOutOfBounds = { "BitIndexOutOfBounds", "BitIndexOutOfBounds", &SWIGTYPE_p_coment__BitIndexOutOfBounds,_proxy__wrap_new_BitIndexOutOfBounds, swig_delete_BitIndexOutOfBounds, swig_BitIndexOutOfBounds_methods, swig_BitIndexOutOfBounds_attributes, &swig_BitIndexOutOfBounds_Sf_SwigStatic, swig_BitIndexOutOfBounds_meta, swig_BitIndexOutOfBounds_bases, swig_BitIndexOutOfBounds_base_names };

static int _wrap_new_CompMapUnregistered(lua_State* L) {
  int SWIG_arg = 0;
  coment::CompMapUnregistered *result = 0 ;
  
  SWIG_check_num_args("coment::CompMapUnregistered::CompMapUnregistered",0,0)
  result = (coment::CompMapUnregistered *)new coment::CompMapUnregistered();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__CompMapUnregistered,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CompMapUnregistered(void *obj) {
coment::CompMapUnregistered *arg1 = (coment::CompMapUnregistered *) obj;
delete arg1;
}
static int _proxy__wrap_new_CompMapUnregistered(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CompMapUnregistered);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CompMapUnregistered_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CompMapUnregistered_methods[]= {
    {0,0}
};
static swig_lua_method swig_CompMapUnregistered_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CompMapUnregistered_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CompMapUnregistered_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CompMapUnregistered_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CompMapUnregistered_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CompMapUnregistered_Sf_SwigStatic = {
    "CompMapUnregistered",
    swig_CompMapUnregistered_Sf_SwigStatic_methods,
    swig_CompMapUnregistered_Sf_SwigStatic_attributes,
    swig_CompMapUnregistered_Sf_SwigStatic_constants,
    swig_CompMapUnregistered_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CompMapUnregistered_bases[] = {0};
static const char *swig_CompMapUnregistered_base_names[] = {0};
static swig_lua_class _wrap_class_CompMapUnregistered = { "CompMapUnregistered", "CompMapUnregistered", &SWIGTYPE_p_coment__CompMapUnregistered,_proxy__wrap_new_CompMapUnregistered, swig_delete_CompMapUnregistered, swig_CompMapUnregistered_methods, swig_CompMapUnregistered_attributes, &swig_CompMapUnregistered_Sf_SwigStatic, swig_CompMapUnregistered_meta, swig_CompMapUnregistered_bases, swig_CompMapUnregistered_base_names };

static int _wrap_new_DeadEntity(lua_State* L) {
  int SWIG_arg = 0;
  coment::DeadEntity *result = 0 ;
  
  SWIG_check_num_args("coment::DeadEntity::DeadEntity",0,0)
  result = (coment::DeadEntity *)new coment::DeadEntity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__DeadEntity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DeadEntity(void *obj) {
coment::DeadEntity *arg1 = (coment::DeadEntity *) obj;
delete arg1;
}
static int _proxy__wrap_new_DeadEntity(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DeadEntity);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DeadEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DeadEntity_methods[]= {
    {0,0}
};
static swig_lua_method swig_DeadEntity_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DeadEntity_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DeadEntity_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DeadEntity_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DeadEntity_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DeadEntity_Sf_SwigStatic = {
    "DeadEntity",
    swig_DeadEntity_Sf_SwigStatic_methods,
    swig_DeadEntity_Sf_SwigStatic_attributes,
    swig_DeadEntity_Sf_SwigStatic_constants,
    swig_DeadEntity_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DeadEntity_bases[] = {0};
static const char *swig_DeadEntity_base_names[] = {0};
static swig_lua_class _wrap_class_DeadEntity = { "DeadEntity", "DeadEntity", &SWIGTYPE_p_coment__DeadEntity,_proxy__wrap_new_DeadEntity, swig_delete_DeadEntity, swig_DeadEntity_methods, swig_DeadEntity_attributes, &swig_DeadEntity_Sf_SwigStatic, swig_DeadEntity_meta, swig_DeadEntity_bases, swig_DeadEntity_base_names };

static int _wrap_new_IndexOutOfBounds(lua_State* L) {
  int SWIG_arg = 0;
  coment::IndexOutOfBounds *result = 0 ;
  
  SWIG_check_num_args("coment::IndexOutOfBounds::IndexOutOfBounds",0,0)
  result = (coment::IndexOutOfBounds *)new coment::IndexOutOfBounds();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__IndexOutOfBounds,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IndexOutOfBounds(void *obj) {
coment::IndexOutOfBounds *arg1 = (coment::IndexOutOfBounds *) obj;
delete arg1;
}
static int _proxy__wrap_new_IndexOutOfBounds(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IndexOutOfBounds);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IndexOutOfBounds_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IndexOutOfBounds_methods[]= {
    {0,0}
};
static swig_lua_method swig_IndexOutOfBounds_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IndexOutOfBounds_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IndexOutOfBounds_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IndexOutOfBounds_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IndexOutOfBounds_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IndexOutOfBounds_Sf_SwigStatic = {
    "IndexOutOfBounds",
    swig_IndexOutOfBounds_Sf_SwigStatic_methods,
    swig_IndexOutOfBounds_Sf_SwigStatic_attributes,
    swig_IndexOutOfBounds_Sf_SwigStatic_constants,
    swig_IndexOutOfBounds_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IndexOutOfBounds_bases[] = {0};
static const char *swig_IndexOutOfBounds_base_names[] = {0};
static swig_lua_class _wrap_class_IndexOutOfBounds = { "IndexOutOfBounds", "IndexOutOfBounds", &SWIGTYPE_p_coment__IndexOutOfBounds,_proxy__wrap_new_IndexOutOfBounds, swig_delete_IndexOutOfBounds, swig_IndexOutOfBounds_methods, swig_IndexOutOfBounds_attributes, &swig_IndexOutOfBounds_Sf_SwigStatic, swig_IndexOutOfBounds_meta, swig_IndexOutOfBounds_bases, swig_IndexOutOfBounds_base_names };

static int _wrap_new_NotImplemented(lua_State* L) {
  int SWIG_arg = 0;
  coment::NotImplemented *result = 0 ;
  
  SWIG_check_num_args("coment::NotImplemented::NotImplemented",0,0)
  result = (coment::NotImplemented *)new coment::NotImplemented();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__NotImplemented,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NotImplemented(void *obj) {
coment::NotImplemented *arg1 = (coment::NotImplemented *) obj;
delete arg1;
}
static int _proxy__wrap_new_NotImplemented(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NotImplemented);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NotImplemented_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NotImplemented_methods[]= {
    {0,0}
};
static swig_lua_method swig_NotImplemented_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NotImplemented_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NotImplemented_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NotImplemented_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NotImplemented_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NotImplemented_Sf_SwigStatic = {
    "NotImplemented",
    swig_NotImplemented_Sf_SwigStatic_methods,
    swig_NotImplemented_Sf_SwigStatic_attributes,
    swig_NotImplemented_Sf_SwigStatic_constants,
    swig_NotImplemented_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NotImplemented_bases[] = {0};
static const char *swig_NotImplemented_base_names[] = {0};
static swig_lua_class _wrap_class_NotImplemented = { "NotImplemented", "NotImplemented", &SWIGTYPE_p_coment__NotImplemented,_proxy__wrap_new_NotImplemented, swig_delete_NotImplemented, swig_NotImplemented_methods, swig_NotImplemented_attributes, &swig_NotImplemented_Sf_SwigStatic, swig_NotImplemented_meta, swig_NotImplemented_bases, swig_NotImplemented_base_names };

static int _wrap_new_UninitialisedEntity(lua_State* L) {
  int SWIG_arg = 0;
  coment::UninitialisedEntity *result = 0 ;
  
  SWIG_check_num_args("coment::UninitialisedEntity::UninitialisedEntity",0,0)
  result = (coment::UninitialisedEntity *)new coment::UninitialisedEntity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__UninitialisedEntity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_UninitialisedEntity(void *obj) {
coment::UninitialisedEntity *arg1 = (coment::UninitialisedEntity *) obj;
delete arg1;
}
static int _proxy__wrap_new_UninitialisedEntity(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_UninitialisedEntity);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_UninitialisedEntity_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_UninitialisedEntity_methods[]= {
    {0,0}
};
static swig_lua_method swig_UninitialisedEntity_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_UninitialisedEntity_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_UninitialisedEntity_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_UninitialisedEntity_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_UninitialisedEntity_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_UninitialisedEntity_Sf_SwigStatic = {
    "UninitialisedEntity",
    swig_UninitialisedEntity_Sf_SwigStatic_methods,
    swig_UninitialisedEntity_Sf_SwigStatic_attributes,
    swig_UninitialisedEntity_Sf_SwigStatic_constants,
    swig_UninitialisedEntity_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_UninitialisedEntity_bases[] = {0};
static const char *swig_UninitialisedEntity_base_names[] = {0};
static swig_lua_class _wrap_class_UninitialisedEntity = { "UninitialisedEntity", "UninitialisedEntity", &SWIGTYPE_p_coment__UninitialisedEntity,_proxy__wrap_new_UninitialisedEntity, swig_delete_UninitialisedEntity, swig_UninitialisedEntity_methods, swig_UninitialisedEntity_attributes, &swig_UninitialisedEntity_Sf_SwigStatic, swig_UninitialisedEntity_meta, swig_UninitialisedEntity_bases, swig_UninitialisedEntity_base_names };

static int _wrap_ComponentManager_removeComponents(lua_State* L) {
  int SWIG_arg = 0;
  coment::ComponentManager *arg1 = (coment::ComponentManager *) 0 ;
  coment::EntityInfo *arg2 = 0 ;
  
  SWIG_check_num_args("coment::ComponentManager::removeComponents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::ComponentManager::removeComponents",1,"coment::ComponentManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::ComponentManager::removeComponents",2,"coment::EntityInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__ComponentManager,0))){
    SWIG_fail_ptr("ComponentManager_removeComponents",1,SWIGTYPE_p_coment__ComponentManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("ComponentManager_removeComponents",2,SWIGTYPE_p_coment__EntityInfo);
  }
  
  (arg1)->removeComponents(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComponentManager_onRegistered(lua_State* L) {
  int SWIG_arg = 0;
  coment::ComponentManager *arg1 = (coment::ComponentManager *) 0 ;
  
  SWIG_check_num_args("coment::ComponentManager::onRegistered",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::ComponentManager::onRegistered",1,"coment::ComponentManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__ComponentManager,0))){
    SWIG_fail_ptr("ComponentManager_onRegistered",1,SWIGTYPE_p_coment__ComponentManager);
  }
  
  (arg1)->onRegistered();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComponentManager(lua_State* L) {
  int SWIG_arg = 0;
  coment::ComponentManager *result = 0 ;
  
  SWIG_check_num_args("coment::ComponentManager::ComponentManager",0,0)
  result = (coment::ComponentManager *)new coment::ComponentManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__ComponentManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ComponentManager(void *obj) {
coment::ComponentManager *arg1 = (coment::ComponentManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_ComponentManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ComponentManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ComponentManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ComponentManager_methods[]= {
    { "removeComponents", _wrap_ComponentManager_removeComponents},
    { "onRegistered", _wrap_ComponentManager_onRegistered},
    {0,0}
};
static swig_lua_method swig_ComponentManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ComponentManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ComponentManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ComponentManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ComponentManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ComponentManager_Sf_SwigStatic = {
    "ComponentManager",
    swig_ComponentManager_Sf_SwigStatic_methods,
    swig_ComponentManager_Sf_SwigStatic_attributes,
    swig_ComponentManager_Sf_SwigStatic_constants,
    swig_ComponentManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ComponentManager_bases[] = {0};
static const char *swig_ComponentManager_base_names[] = {0};
static swig_lua_class _wrap_class_ComponentManager = { "ComponentManager", "ComponentManager", &SWIGTYPE_p_coment__ComponentManager,_proxy__wrap_new_ComponentManager, swig_delete_ComponentManager, swig_ComponentManager_methods, swig_ComponentManager_attributes, &swig_ComponentManager_Sf_SwigStatic, swig_ComponentManager_meta, swig_ComponentManager_bases, swig_ComponentManager_base_names };

static int _wrap_new_ComponentTypeManager(lua_State* L) {
  int SWIG_arg = 0;
  coment::ComponentTypeManager *result = 0 ;
  
  SWIG_check_num_args("coment::ComponentTypeManager::ComponentTypeManager",0,0)
  result = (coment::ComponentTypeManager *)new coment::ComponentTypeManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__ComponentTypeManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ComponentTypeManager(void *obj) {
coment::ComponentTypeManager *arg1 = (coment::ComponentTypeManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_ComponentTypeManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ComponentTypeManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ComponentTypeManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ComponentTypeManager_methods[]= {
    {0,0}
};
static swig_lua_method swig_ComponentTypeManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ComponentTypeManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ComponentTypeManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ComponentTypeManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ComponentTypeManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ComponentTypeManager_Sf_SwigStatic = {
    "ComponentTypeManager",
    swig_ComponentTypeManager_Sf_SwigStatic_methods,
    swig_ComponentTypeManager_Sf_SwigStatic_attributes,
    swig_ComponentTypeManager_Sf_SwigStatic_constants,
    swig_ComponentTypeManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ComponentTypeManager_bases[] = {0};
static const char *swig_ComponentTypeManager_base_names[] = {0};
static swig_lua_class _wrap_class_ComponentTypeManager = { "ComponentTypeManager", "ComponentTypeManager", &SWIGTYPE_p_coment__ComponentTypeManager,_proxy__wrap_new_ComponentTypeManager, swig_delete_ComponentTypeManager, swig_ComponentTypeManager_methods, swig_ComponentTypeManager_attributes, &swig_ComponentTypeManager_Sf_SwigStatic, swig_ComponentTypeManager_meta, swig_ComponentTypeManager_bases, swig_ComponentTypeManager_base_names };

static int _wrap_new_EntityManager(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityManager *result = 0 ;
  
  SWIG_check_num_args("coment::EntityManager::EntityManager",0,0)
  result = (coment::EntityManager *)new coment::EntityManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__EntityManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_loopStart(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityManager *arg1 = (coment::EntityManager *) 0 ;
  
  SWIG_check_num_args("coment::EntityManager::loopStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityManager::loopStart",1,"coment::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_loopStart",1,SWIGTYPE_p_coment__EntityManager);
  }
  
  (arg1)->loopStart();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_createEntity(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityManager *arg1 = (coment::EntityManager *) 0 ;
  coment::Entity result;
  
  SWIG_check_num_args("coment::EntityManager::createEntity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityManager::createEntity",1,"coment::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_createEntity",1,SWIGTYPE_p_coment__EntityManager);
  }
  
  result = (arg1)->createEntity();
  {
    coment::Entity * resultptr = new coment::Entity((const coment::Entity &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_coment__Entity,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_isAlive(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityManager *arg1 = (coment::EntityManager *) 0 ;
  coment::Entity *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("coment::EntityManager::isAlive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityManager::isAlive",1,"coment::EntityManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::EntityManager::isAlive",2,"coment::Entity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_isAlive",1,SWIGTYPE_p_coment__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("EntityManager_isAlive",2,SWIGTYPE_p_coment__Entity);
  }
  
  result = (bool)(arg1)->isAlive((coment::Entity const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_getValidEntityInfo(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityManager *arg1 = (coment::EntityManager *) 0 ;
  coment::Entity *arg2 = 0 ;
  coment::EntityInfo *result = 0 ;
  
  SWIG_check_num_args("coment::EntityManager::getValidEntityInfo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityManager::getValidEntityInfo",1,"coment::EntityManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::EntityManager::getValidEntityInfo",2,"coment::Entity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_getValidEntityInfo",1,SWIGTYPE_p_coment__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("EntityManager_getValidEntityInfo",2,SWIGTYPE_p_coment__Entity);
  }
  
  result = (coment::EntityInfo *) &(arg1)->getValidEntityInfo((coment::Entity const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__EntityInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_remove(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityManager *arg1 = (coment::EntityManager *) 0 ;
  coment::EntityInfo *arg2 = 0 ;
  
  SWIG_check_num_args("coment::EntityManager::remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityManager::remove",1,"coment::EntityManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::EntityManager::remove",2,"coment::EntityInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_remove",1,SWIGTYPE_p_coment__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("EntityManager_remove",2,SWIGTYPE_p_coment__EntityInfo);
  }
  
  (arg1)->remove(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EntityManager(void *obj) {
coment::EntityManager *arg1 = (coment::EntityManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_EntityManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EntityManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EntityManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntityManager_methods[]= {
    { "loopStart", _wrap_EntityManager_loopStart},
    { "createEntity", _wrap_EntityManager_createEntity},
    { "isAlive", _wrap_EntityManager_isAlive},
    { "getValidEntityInfo", _wrap_EntityManager_getValidEntityInfo},
    { "remove", _wrap_EntityManager_remove},
    {0,0}
};
static swig_lua_method swig_EntityManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EntityManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EntityManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntityManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EntityManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntityManager_Sf_SwigStatic = {
    "EntityManager",
    swig_EntityManager_Sf_SwigStatic_methods,
    swig_EntityManager_Sf_SwigStatic_attributes,
    swig_EntityManager_Sf_SwigStatic_constants,
    swig_EntityManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntityManager_bases[] = {0};
static const char *swig_EntityManager_base_names[] = {0};
static swig_lua_class _wrap_class_EntityManager = { "EntityManager", "EntityManager", &SWIGTYPE_p_coment__EntityManager,_proxy__wrap_new_EntityManager, swig_delete_EntityManager, swig_EntityManager_methods, swig_EntityManager_attributes, &swig_EntityManager_Sf_SwigStatic, swig_EntityManager_meta, swig_EntityManager_bases, swig_EntityManager_base_names };

static int _wrap_new_GroupManager(lua_State* L) {
  int SWIG_arg = 0;
  coment::GroupManager *result = 0 ;
  
  SWIG_check_num_args("coment::GroupManager::GroupManager",0,0)
  result = (coment::GroupManager *)new coment::GroupManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__GroupManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GroupManager_addGroup(lua_State* L) {
  int SWIG_arg = 0;
  coment::GroupManager *arg1 = (coment::GroupManager *) 0 ;
  coment::EntityInfo *arg2 = 0 ;
  std::string arg3 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("coment::GroupManager::addGroup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::GroupManager::addGroup",1,"coment::GroupManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::GroupManager::addGroup",2,"coment::EntityInfo &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("coment::GroupManager::addGroup",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__GroupManager,0))){
    SWIG_fail_ptr("GroupManager_addGroup",1,SWIGTYPE_p_coment__GroupManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("GroupManager_addGroup",2,SWIGTYPE_p_coment__EntityInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("GroupManager_addGroup",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  (arg1)->addGroup(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GroupManager_removeGroup(lua_State* L) {
  int SWIG_arg = 0;
  coment::GroupManager *arg1 = (coment::GroupManager *) 0 ;
  coment::EntityInfo *arg2 = 0 ;
  std::string arg3 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("coment::GroupManager::removeGroup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::GroupManager::removeGroup",1,"coment::GroupManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::GroupManager::removeGroup",2,"coment::EntityInfo &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("coment::GroupManager::removeGroup",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__GroupManager,0))){
    SWIG_fail_ptr("GroupManager_removeGroup",1,SWIGTYPE_p_coment__GroupManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("GroupManager_removeGroup",2,SWIGTYPE_p_coment__EntityInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("GroupManager_removeGroup",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  (arg1)->removeGroup(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GroupManager_removeGroups(lua_State* L) {
  int SWIG_arg = 0;
  coment::GroupManager *arg1 = (coment::GroupManager *) 0 ;
  coment::EntityInfo *arg2 = 0 ;
  
  SWIG_check_num_args("coment::GroupManager::removeGroups",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::GroupManager::removeGroups",1,"coment::GroupManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::GroupManager::removeGroups",2,"coment::EntityInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__GroupManager,0))){
    SWIG_fail_ptr("GroupManager_removeGroups",1,SWIGTYPE_p_coment__GroupManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("GroupManager_removeGroups",2,SWIGTYPE_p_coment__EntityInfo);
  }
  
  (arg1)->removeGroups(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GroupManager_isInGroup(lua_State* L) {
  int SWIG_arg = 0;
  coment::GroupManager *arg1 = (coment::GroupManager *) 0 ;
  coment::EntityInfo *arg2 = 0 ;
  std::string arg3 ;
  std::string *argp3 ;
  bool result;
  
  SWIG_check_num_args("coment::GroupManager::isInGroup",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::GroupManager::isInGroup",1,"coment::GroupManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::GroupManager::isInGroup",2,"coment::EntityInfo const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("coment::GroupManager::isInGroup",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__GroupManager,0))){
    SWIG_fail_ptr("GroupManager_isInGroup",1,SWIGTYPE_p_coment__GroupManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("GroupManager_isInGroup",2,SWIGTYPE_p_coment__EntityInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("GroupManager_isInGroup",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  result = (bool)(arg1)->isInGroup((coment::EntityInfo const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GroupManager_getEntitiesByGroup(lua_State* L) {
  int SWIG_arg = 0;
  coment::GroupManager *arg1 = (coment::GroupManager *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  std::vector< coment::Entity > *result = 0 ;
  
  SWIG_check_num_args("coment::GroupManager::getEntitiesByGroup",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::GroupManager::getEntitiesByGroup",1,"coment::GroupManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::GroupManager::getEntitiesByGroup",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__GroupManager,0))){
    SWIG_fail_ptr("GroupManager_getEntitiesByGroup",1,SWIGTYPE_p_coment__GroupManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("GroupManager_getEntitiesByGroup",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (std::vector< coment::Entity > *) &(arg1)->getEntitiesByGroup(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_coment__Entity_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GroupManager(void *obj) {
coment::GroupManager *arg1 = (coment::GroupManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_GroupManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GroupManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GroupManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GroupManager_methods[]= {
    { "addGroup", _wrap_GroupManager_addGroup},
    { "removeGroup", _wrap_GroupManager_removeGroup},
    { "removeGroups", _wrap_GroupManager_removeGroups},
    { "isInGroup", _wrap_GroupManager_isInGroup},
    { "getEntitiesByGroup", _wrap_GroupManager_getEntitiesByGroup},
    {0,0}
};
static swig_lua_method swig_GroupManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GroupManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GroupManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GroupManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GroupManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GroupManager_Sf_SwigStatic = {
    "GroupManager",
    swig_GroupManager_Sf_SwigStatic_methods,
    swig_GroupManager_Sf_SwigStatic_attributes,
    swig_GroupManager_Sf_SwigStatic_constants,
    swig_GroupManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GroupManager_bases[] = {0};
static const char *swig_GroupManager_base_names[] = {0};
static swig_lua_class _wrap_class_GroupManager = { "GroupManager", "GroupManager", &SWIGTYPE_p_coment__GroupManager,_proxy__wrap_new_GroupManager, swig_delete_GroupManager, swig_GroupManager_methods, swig_GroupManager_attributes, &swig_GroupManager_Sf_SwigStatic, swig_GroupManager_meta, swig_GroupManager_bases, swig_GroupManager_base_names };

static int _wrap_new_Manager(lua_State* L) {
  int SWIG_arg = 0;
  coment::Manager *result = 0 ;
  
  SWIG_check_num_args("coment::Manager::Manager",0,0)
  result = (coment::Manager *)new coment::Manager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__Manager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Manager_onRegistered(lua_State* L) {
  int SWIG_arg = 0;
  coment::Manager *arg1 = (coment::Manager *) 0 ;
  
  SWIG_check_num_args("coment::Manager::onRegistered",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::Manager::onRegistered",1,"coment::Manager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__Manager,0))){
    SWIG_fail_ptr("Manager_onRegistered",1,SWIGTYPE_p_coment__Manager);
  }
  
  (arg1)->onRegistered();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Manager_getInitialised(lua_State* L) {
  int SWIG_arg = 0;
  coment::Manager *arg1 = (coment::Manager *) 0 ;
  bool result;
  
  SWIG_check_num_args("coment::Manager::getInitialised",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::Manager::getInitialised",1,"coment::Manager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__Manager,0))){
    SWIG_fail_ptr("Manager_getInitialised",1,SWIGTYPE_p_coment__Manager);
  }
  
  result = (bool)(arg1)->getInitialised();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Manager(void *obj) {
coment::Manager *arg1 = (coment::Manager *) obj;
delete arg1;
}
static int _proxy__wrap_new_Manager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Manager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Manager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Manager_methods[]= {
    { "onRegistered", _wrap_Manager_onRegistered},
    { "getInitialised", _wrap_Manager_getInitialised},
    {0,0}
};
static swig_lua_method swig_Manager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Manager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Manager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Manager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Manager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Manager_Sf_SwigStatic = {
    "Manager",
    swig_Manager_Sf_SwigStatic_methods,
    swig_Manager_Sf_SwigStatic_attributes,
    swig_Manager_Sf_SwigStatic_constants,
    swig_Manager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Manager_bases[] = {0};
static const char *swig_Manager_base_names[] = {0};
static swig_lua_class _wrap_class_Manager = { "Manager", "Manager", &SWIGTYPE_p_coment__Manager,_proxy__wrap_new_Manager, swig_delete_Manager, swig_Manager_methods, swig_Manager_attributes, &swig_Manager_Sf_SwigStatic, swig_Manager_meta, swig_Manager_bases, swig_Manager_base_names };

static int _wrap_new_ManagerManager(lua_State* L) {
  int SWIG_arg = 0;
  coment::ManagerManager *result = 0 ;
  
  SWIG_check_num_args("coment::ManagerManager::ManagerManager",0,0)
  result = (coment::ManagerManager *)new coment::ManagerManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__ManagerManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ManagerManager(void *obj) {
coment::ManagerManager *arg1 = (coment::ManagerManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_ManagerManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ManagerManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ManagerManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ManagerManager_methods[]= {
    {0,0}
};
static swig_lua_method swig_ManagerManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ManagerManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ManagerManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ManagerManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ManagerManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ManagerManager_Sf_SwigStatic = {
    "ManagerManager",
    swig_ManagerManager_Sf_SwigStatic_methods,
    swig_ManagerManager_Sf_SwigStatic_attributes,
    swig_ManagerManager_Sf_SwigStatic_constants,
    swig_ManagerManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ManagerManager_bases[] = {0,0};
static const char *swig_ManagerManager_base_names[] = {"coment::Manager *",0};
static swig_lua_class _wrap_class_ManagerManager = { "ManagerManager", "ManagerManager", &SWIGTYPE_p_coment__ManagerManager,_proxy__wrap_new_ManagerManager, swig_delete_ManagerManager, swig_ManagerManager_methods, swig_ManagerManager_attributes, &swig_ManagerManager_Sf_SwigStatic, swig_ManagerManager_meta, swig_ManagerManager_bases, swig_ManagerManager_base_names };

static int _wrap_new_SystemManager(lua_State* L) {
  int SWIG_arg = 0;
  coment::SystemManager *result = 0 ;
  
  SWIG_check_num_args("coment::SystemManager::SystemManager",0,0)
  result = (coment::SystemManager *)new coment::SystemManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__SystemManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemManager_loopStart(lua_State* L) {
  int SWIG_arg = 0;
  coment::SystemManager *arg1 = (coment::SystemManager *) 0 ;
  
  SWIG_check_num_args("coment::SystemManager::loopStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::SystemManager::loopStart",1,"coment::SystemManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__SystemManager,0))){
    SWIG_fail_ptr("SystemManager_loopStart",1,SWIGTYPE_p_coment__SystemManager);
  }
  
  (arg1)->loopStart();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemManager_refresh(lua_State* L) {
  int SWIG_arg = 0;
  coment::SystemManager *arg1 = (coment::SystemManager *) 0 ;
  coment::EntityInfo *arg2 = 0 ;
  
  SWIG_check_num_args("coment::SystemManager::refresh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::SystemManager::refresh",1,"coment::SystemManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::SystemManager::refresh",2,"coment::EntityInfo &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__SystemManager,0))){
    SWIG_fail_ptr("SystemManager_refresh",1,SWIGTYPE_p_coment__SystemManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("SystemManager_refresh",2,SWIGTYPE_p_coment__EntityInfo);
  }
  
  (arg1)->refresh(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SystemManager_update(lua_State* L) {
  int SWIG_arg = 0;
  coment::SystemManager *arg1 = (coment::SystemManager *) 0 ;
  
  SWIG_check_num_args("coment::SystemManager::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::SystemManager::update",1,"coment::SystemManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__SystemManager,0))){
    SWIG_fail_ptr("SystemManager_update",1,SWIGTYPE_p_coment__SystemManager);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SystemManager(void *obj) {
coment::SystemManager *arg1 = (coment::SystemManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_SystemManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SystemManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SystemManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SystemManager_methods[]= {
    { "loopStart", _wrap_SystemManager_loopStart},
    { "refresh", _wrap_SystemManager_refresh},
    { "update", _wrap_SystemManager_update},
    {0,0}
};
static swig_lua_method swig_SystemManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SystemManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SystemManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SystemManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SystemManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SystemManager_Sf_SwigStatic = {
    "SystemManager",
    swig_SystemManager_Sf_SwigStatic_methods,
    swig_SystemManager_Sf_SwigStatic_attributes,
    swig_SystemManager_Sf_SwigStatic_constants,
    swig_SystemManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SystemManager_bases[] = {0,0};
static const char *swig_SystemManager_base_names[] = {"coment::Manager *",0};
static swig_lua_class _wrap_class_SystemManager = { "SystemManager", "SystemManager", &SWIGTYPE_p_coment__SystemManager,_proxy__wrap_new_SystemManager, swig_delete_SystemManager, swig_SystemManager_methods, swig_SystemManager_attributes, &swig_SystemManager_Sf_SwigStatic, swig_SystemManager_meta, swig_SystemManager_bases, swig_SystemManager_base_names };

static int _wrap_new_TagManager(lua_State* L) {
  int SWIG_arg = 0;
  coment::TagManager *result = 0 ;
  
  SWIG_check_num_args("coment::TagManager::TagManager",0,0)
  result = (coment::TagManager *)new coment::TagManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__TagManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TagManager_setTag(lua_State* L) {
  int SWIG_arg = 0;
  coment::TagManager *arg1 = (coment::TagManager *) 0 ;
  coment::EntityInfo *arg2 = 0 ;
  std::string arg3 ;
  std::string *argp3 ;
  
  SWIG_check_num_args("coment::TagManager::setTag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::TagManager::setTag",1,"coment::TagManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::TagManager::setTag",2,"coment::EntityInfo const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("coment::TagManager::setTag",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__TagManager,0))){
    SWIG_fail_ptr("TagManager_setTag",1,SWIGTYPE_p_coment__TagManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("TagManager_setTag",2,SWIGTYPE_p_coment__EntityInfo);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("TagManager_setTag",3,SWIGTYPE_p_std__string);
  }
  arg3 = *argp3;
  
  (arg1)->setTag((coment::EntityInfo const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TagManager_getTag(lua_State* L) {
  int SWIG_arg = 0;
  coment::TagManager *arg1 = (coment::TagManager *) 0 ;
  coment::EntityInfo *arg2 = 0 ;
  std::string result;
  
  SWIG_check_num_args("coment::TagManager::getTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::TagManager::getTag",1,"coment::TagManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::TagManager::getTag",2,"coment::EntityInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__TagManager,0))){
    SWIG_fail_ptr("TagManager_getTag",1,SWIGTYPE_p_coment__TagManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("TagManager_getTag",2,SWIGTYPE_p_coment__EntityInfo);
  }
  
  result = (arg1)->getTag((coment::EntityInfo const &)*arg2);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TagManager_getEntities(lua_State* L) {
  int SWIG_arg = 0;
  coment::TagManager *arg1 = (coment::TagManager *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  std::vector< coment::Entity > *result = 0 ;
  
  SWIG_check_num_args("coment::TagManager::getEntities",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::TagManager::getEntities",1,"coment::TagManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::TagManager::getEntities",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__TagManager,0))){
    SWIG_fail_ptr("TagManager_getEntities",1,SWIGTYPE_p_coment__TagManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("TagManager_getEntities",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  result = (std::vector< coment::Entity > *) &(arg1)->getEntities(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_coment__Entity_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TagManager_removeEntity(lua_State* L) {
  int SWIG_arg = 0;
  coment::TagManager *arg1 = (coment::TagManager *) 0 ;
  coment::EntityInfo *arg2 = 0 ;
  
  SWIG_check_num_args("coment::TagManager::removeEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::TagManager::removeEntity",1,"coment::TagManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::TagManager::removeEntity",2,"coment::EntityInfo const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__TagManager,0))){
    SWIG_fail_ptr("TagManager_removeEntity",1,SWIGTYPE_p_coment__TagManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__EntityInfo,0))){
    SWIG_fail_ptr("TagManager_removeEntity",2,SWIGTYPE_p_coment__EntityInfo);
  }
  
  (arg1)->removeEntity((coment::EntityInfo const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TagManager(void *obj) {
coment::TagManager *arg1 = (coment::TagManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_TagManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TagManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TagManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TagManager_methods[]= {
    { "setTag", _wrap_TagManager_setTag},
    { "getTag", _wrap_TagManager_getTag},
    { "getEntities", _wrap_TagManager_getEntities},
    { "removeEntity", _wrap_TagManager_removeEntity},
    {0,0}
};
static swig_lua_method swig_TagManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TagManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TagManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TagManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TagManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TagManager_Sf_SwigStatic = {
    "TagManager",
    swig_TagManager_Sf_SwigStatic_methods,
    swig_TagManager_Sf_SwigStatic_attributes,
    swig_TagManager_Sf_SwigStatic_constants,
    swig_TagManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TagManager_bases[] = {0,0};
static const char *swig_TagManager_base_names[] = {"coment::Manager *",0};
static swig_lua_class _wrap_class_TagManager = { "TagManager", "TagManager", &SWIGTYPE_p_coment__TagManager,_proxy__wrap_new_TagManager, swig_delete_TagManager, swig_TagManager_methods, swig_TagManager_attributes, &swig_TagManager_Sf_SwigStatic, swig_TagManager_meta, swig_TagManager_bases, swig_TagManager_base_names };

static int _wrap_new_VariableManager(lua_State* L) {
  int SWIG_arg = 0;
  coment::VariableManager *result = 0 ;
  
  SWIG_check_num_args("coment::VariableManager::VariableManager",0,0)
  result = (coment::VariableManager *)new coment::VariableManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__VariableManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VariableManager(void *obj) {
coment::VariableManager *arg1 = (coment::VariableManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_VariableManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VariableManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VariableManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VariableManager_methods[]= {
    {0,0}
};
static swig_lua_method swig_VariableManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VariableManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VariableManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VariableManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VariableManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VariableManager_Sf_SwigStatic = {
    "VariableManager",
    swig_VariableManager_Sf_SwigStatic_methods,
    swig_VariableManager_Sf_SwigStatic_attributes,
    swig_VariableManager_Sf_SwigStatic_constants,
    swig_VariableManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VariableManager_bases[] = {0,0};
static const char *swig_VariableManager_base_names[] = {"coment::Manager *",0};
static swig_lua_class _wrap_class_VariableManager = { "VariableManager", "VariableManager", &SWIGTYPE_p_coment__VariableManager,_proxy__wrap_new_VariableManager, swig_delete_VariableManager, swig_VariableManager_methods, swig_VariableManager_attributes, &swig_VariableManager_Sf_SwigStatic, swig_VariableManager_meta, swig_VariableManager_bases, swig_VariableManager_base_names };

static int _wrap_Scene_update(lua_State* L) {
  int SWIG_arg = 0;
  coment::Scene *arg1 = (coment::Scene *) 0 ;
  
  SWIG_check_num_args("coment::Scene::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::Scene::update",1,"coment::Scene *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__Scene,0))){
    SWIG_fail_ptr("Scene_update",1,SWIGTYPE_p_coment__Scene);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Scene(lua_State* L) {
  int SWIG_arg = 0;
  coment::Scene *result = 0 ;
  
  SWIG_check_num_args("coment::Scene::Scene",0,0)
  result = (coment::Scene *)new coment::Scene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_coment__Scene,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Scene(void *obj) {
coment::Scene *arg1 = (coment::Scene *) obj;
delete arg1;
}
static int _proxy__wrap_new_Scene(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Scene);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Scene_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Scene_methods[]= {
    { "update", _wrap_Scene_update},
    {0,0}
};
static swig_lua_method swig_Scene_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Scene_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Scene_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Scene_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Scene_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Scene_Sf_SwigStatic = {
    "Scene",
    swig_Scene_Sf_SwigStatic_methods,
    swig_Scene_Sf_SwigStatic_attributes,
    swig_Scene_Sf_SwigStatic_constants,
    swig_Scene_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Scene_bases[] = {0};
static const char *swig_Scene_base_names[] = {0};
static swig_lua_class _wrap_class_Scene = { "Scene", "Scene", &SWIGTYPE_p_coment__Scene,_proxy__wrap_new_Scene, swig_delete_Scene, swig_Scene_methods, swig_Scene_attributes, &swig_Scene_Sf_SwigStatic, swig_Scene_meta, swig_Scene_bases, swig_Scene_base_names };

static int _wrap_EntityProcessingSystem_process(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityProcessingSystem *arg1 = (coment::EntityProcessingSystem *) 0 ;
  coment::Entity *arg2 = 0 ;
  
  SWIG_check_num_args("coment::EntityProcessingSystem::process",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityProcessingSystem::process",1,"coment::EntityProcessingSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::EntityProcessingSystem::process",2,"coment::Entity const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityProcessingSystem,0))){
    SWIG_fail_ptr("EntityProcessingSystem_process",1,SWIGTYPE_p_coment__EntityProcessingSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_coment__Entity,0))){
    SWIG_fail_ptr("EntityProcessingSystem_process",2,SWIGTYPE_p_coment__Entity);
  }
  
  (arg1)->process((coment::Entity const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProcessingSystem_checkProcessing(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityProcessingSystem *arg1 = (coment::EntityProcessingSystem *) 0 ;
  bool result;
  
  SWIG_check_num_args("coment::EntityProcessingSystem::checkProcessing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityProcessingSystem::checkProcessing",1,"coment::EntityProcessingSystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityProcessingSystem,0))){
    SWIG_fail_ptr("EntityProcessingSystem_checkProcessing",1,SWIGTYPE_p_coment__EntityProcessingSystem);
  }
  
  result = (bool)(arg1)->checkProcessing();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProcessingSystem_processEntities(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntityProcessingSystem *arg1 = (coment::EntityProcessingSystem *) 0 ;
  std::vector< coment::Entity > *arg2 = 0 ;
  
  SWIG_check_num_args("coment::EntityProcessingSystem::processEntities",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntityProcessingSystem::processEntities",1,"coment::EntityProcessingSystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::EntityProcessingSystem::processEntities",2,"std::vector< coment::Entity > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntityProcessingSystem,0))){
    SWIG_fail_ptr("EntityProcessingSystem_processEntities",1,SWIGTYPE_p_coment__EntityProcessingSystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_coment__Entity_t,0))){
    SWIG_fail_ptr("EntityProcessingSystem_processEntities",2,SWIGTYPE_p_std__vectorT_coment__Entity_t);
  }
  
  (arg1)->processEntities(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EntityProcessingSystem(void *obj) {
coment::EntityProcessingSystem *arg1 = (coment::EntityProcessingSystem *) obj;
delete arg1;
}
static swig_lua_attribute swig_EntityProcessingSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntityProcessingSystem_methods[]= {
    { "process", _wrap_EntityProcessingSystem_process},
    { "checkProcessing", _wrap_EntityProcessingSystem_checkProcessing},
    { "processEntities", _wrap_EntityProcessingSystem_processEntities},
    {0,0}
};
static swig_lua_method swig_EntityProcessingSystem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EntityProcessingSystem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EntityProcessingSystem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntityProcessingSystem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EntityProcessingSystem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntityProcessingSystem_Sf_SwigStatic = {
    "EntityProcessingSystem",
    swig_EntityProcessingSystem_Sf_SwigStatic_methods,
    swig_EntityProcessingSystem_Sf_SwigStatic_attributes,
    swig_EntityProcessingSystem_Sf_SwigStatic_constants,
    swig_EntityProcessingSystem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntityProcessingSystem_bases[] = {0};
static const char *swig_EntityProcessingSystem_base_names[] = {0};
static swig_lua_class _wrap_class_EntityProcessingSystem = { "EntityProcessingSystem", "EntityProcessingSystem", &SWIGTYPE_p_coment__EntityProcessingSystem,0, swig_delete_EntityProcessingSystem, swig_EntityProcessingSystem_methods, swig_EntityProcessingSystem_attributes, &swig_EntityProcessingSystem_Sf_SwigStatic, swig_EntityProcessingSystem_meta, swig_EntityProcessingSystem_bases, swig_EntityProcessingSystem_base_names };

static int _wrap_EntitySystem_update(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntitySystem *arg1 = (coment::EntitySystem *) 0 ;
  
  SWIG_check_num_args("coment::EntitySystem::update",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntitySystem::update",1,"coment::EntitySystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntitySystem,0))){
    SWIG_fail_ptr("EntitySystem_update",1,SWIGTYPE_p_coment__EntitySystem);
  }
  
  (arg1)->update();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntitySystem_setEnabled(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntitySystem *arg1 = (coment::EntitySystem *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("coment::EntitySystem::setEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntitySystem::setEnabled",1,"coment::EntitySystem *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("coment::EntitySystem::setEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntitySystem,0))){
    SWIG_fail_ptr("EntitySystem_setEnabled",1,SWIGTYPE_p_coment__EntitySystem);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntitySystem_getEnabled(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntitySystem *arg1 = (coment::EntitySystem *) 0 ;
  bool result;
  
  SWIG_check_num_args("coment::EntitySystem::getEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntitySystem::getEnabled",1,"coment::EntitySystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntitySystem,0))){
    SWIG_fail_ptr("EntitySystem_getEnabled",1,SWIGTYPE_p_coment__EntitySystem);
  }
  
  result = (bool)(arg1)->getEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntitySystem_processEntities(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntitySystem *arg1 = (coment::EntitySystem *) 0 ;
  std::vector< coment::Entity > *arg2 = 0 ;
  
  SWIG_check_num_args("coment::EntitySystem::processEntities",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntitySystem::processEntities",1,"coment::EntitySystem *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("coment::EntitySystem::processEntities",2,"std::vector< coment::Entity > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntitySystem,0))){
    SWIG_fail_ptr("EntitySystem_processEntities",1,SWIGTYPE_p_coment__EntitySystem);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_coment__Entity_t,0))){
    SWIG_fail_ptr("EntitySystem_processEntities",2,SWIGTYPE_p_std__vectorT_coment__Entity_t);
  }
  
  (arg1)->processEntities(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntitySystem_checkProcessing(lua_State* L) {
  int SWIG_arg = 0;
  coment::EntitySystem *arg1 = (coment::EntitySystem *) 0 ;
  bool result;
  
  SWIG_check_num_args("coment::EntitySystem::checkProcessing",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("coment::EntitySystem::checkProcessing",1,"coment::EntitySystem *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_coment__EntitySystem,0))){
    SWIG_fail_ptr("EntitySystem_checkProcessing",1,SWIGTYPE_p_coment__EntitySystem);
  }
  
  result = (bool)(arg1)->checkProcessing();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EntitySystem(void *obj) {
coment::EntitySystem *arg1 = (coment::EntitySystem *) obj;
delete arg1;
}
static swig_lua_attribute swig_EntitySystem_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntitySystem_methods[]= {
    { "update", _wrap_EntitySystem_update},
    { "setEnabled", _wrap_EntitySystem_setEnabled},
    { "getEnabled", _wrap_EntitySystem_getEnabled},
    { "processEntities", _wrap_EntitySystem_processEntities},
    { "checkProcessing", _wrap_EntitySystem_checkProcessing},
    {0,0}
};
static swig_lua_method swig_EntitySystem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EntitySystem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EntitySystem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntitySystem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EntitySystem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntitySystem_Sf_SwigStatic = {
    "EntitySystem",
    swig_EntitySystem_Sf_SwigStatic_methods,
    swig_EntitySystem_Sf_SwigStatic_attributes,
    swig_EntitySystem_Sf_SwigStatic_constants,
    swig_EntitySystem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntitySystem_bases[] = {0};
static const char *swig_EntitySystem_base_names[] = {0};
static swig_lua_class _wrap_class_EntitySystem = { "EntitySystem", "EntitySystem", &SWIGTYPE_p_coment__EntitySystem,0, swig_delete_EntitySystem, swig_EntitySystem_methods, swig_EntitySystem_attributes, &swig_EntitySystem_Sf_SwigStatic, swig_EntitySystem_meta, swig_EntitySystem_bases, swig_EntitySystem_base_names };

static int _wrap_new_Game(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  ca2d::Game *result = 0 ;
  
  SWIG_check_num_args("ca2d::Game::Game",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ca2d::Game::Game",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::Game::Game",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (ca2d::Game *)new ca2d::Game(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__Game,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_update(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Game *arg1 = (ca2d::Game *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("ca2d::Game::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Game::update",1,"ca2d::Game *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::Game::update",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Game,0))){
    SWIG_fail_ptr("Game_update",1,SWIGTYPE_p_ca2d__Game);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_render(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Game *arg1 = (ca2d::Game *) 0 ;
  
  SWIG_check_num_args("ca2d::Game::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Game::render",1,"ca2d::Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Game,0))){
    SWIG_fail_ptr("Game_render",1,SWIGTYPE_p_ca2d__Game);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_handleEvent(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Game *arg1 = (ca2d::Game *) 0 ;
  SDL_Event arg2 ;
  SDL_Event *argp2 ;
  bool result;
  
  SWIG_check_num_args("ca2d::Game::handleEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Game::handleEvent",1,"ca2d::Game *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::Game::handleEvent",2,"SDL_Event");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Game,0))){
    SWIG_fail_ptr("Game_handleEvent",1,SWIGTYPE_p_ca2d__Game);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SDL_Event,0))){
    SWIG_fail_ptr("Game_handleEvent",2,SWIGTYPE_p_SDL_Event);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->handleEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_run(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Game *arg1 = (ca2d::Game *) 0 ;
  bool result;
  
  SWIG_check_num_args("ca2d::Game::run",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Game::run",1,"ca2d::Game *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Game,0))){
    SWIG_fail_ptr("Game_run",1,SWIGTYPE_p_ca2d__Game);
  }
  
  result = (bool)(arg1)->run();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_isRunning(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Game *arg1 = (ca2d::Game *) 0 ;
  bool result;
  
  SWIG_check_num_args("ca2d::Game::isRunning",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Game::isRunning",1,"ca2d::Game const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Game,0))){
    SWIG_fail_ptr("Game_isRunning",1,SWIGTYPE_p_ca2d__Game);
  }
  
  result = (bool)((ca2d::Game const *)arg1)->isRunning();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Game_getTime(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Game *arg1 = (ca2d::Game *) 0 ;
  double result;
  
  SWIG_check_num_args("ca2d::Game::getTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Game::getTime",1,"ca2d::Game const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Game,0))){
    SWIG_fail_ptr("Game_getTime",1,SWIGTYPE_p_ca2d__Game);
  }
  
  result = (double)((ca2d::Game const *)arg1)->getTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Game(void *obj) {
ca2d::Game *arg1 = (ca2d::Game *) obj;
delete arg1;
}
static int _proxy__wrap_new_Game(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Game);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Game_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Game_methods[]= {
    { "update", _wrap_Game_update},
    { "render", _wrap_Game_render},
    { "handleEvent", _wrap_Game_handleEvent},
    { "run", _wrap_Game_run},
    { "isRunning", _wrap_Game_isRunning},
    { "getTime", _wrap_Game_getTime},
    {0,0}
};
static swig_lua_method swig_Game_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Game_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Game_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Game_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Game_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Game_Sf_SwigStatic = {
    "Game",
    swig_Game_Sf_SwigStatic_methods,
    swig_Game_Sf_SwigStatic_attributes,
    swig_Game_Sf_SwigStatic_constants,
    swig_Game_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Game_bases[] = {0};
static const char *swig_Game_base_names[] = {0};
static swig_lua_class _wrap_class_Game = { "Game", "Game", &SWIGTYPE_p_ca2d__Game,_proxy__wrap_new_Game, swig_delete_Game, swig_Game_methods, swig_Game_attributes, &swig_Game_Sf_SwigStatic, swig_Game_meta, swig_Game_bases, swig_Game_base_names };

static int _wrap_SDLWindowDeleter___call(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::SDLWindowDeleter *arg1 = (ca2d::SDLWindowDeleter *) 0 ;
  SDL_Window *arg2 = (SDL_Window *) 0 ;
  
  SWIG_check_num_args("ca2d::SDLWindowDeleter::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::SDLWindowDeleter::operator ()",1,"ca2d::SDLWindowDeleter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ca2d::SDLWindowDeleter::operator ()",2,"SDL_Window *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__SDLWindowDeleter,0))){
    SWIG_fail_ptr("SDLWindowDeleter___call",1,SWIGTYPE_p_ca2d__SDLWindowDeleter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Window,0))){
    SWIG_fail_ptr("SDLWindowDeleter___call",2,SWIGTYPE_p_SDL_Window);
  }
  
  (arg1)->operator ()(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SDLWindowDeleter(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::SDLWindowDeleter *result = 0 ;
  
  SWIG_check_num_args("ca2d::SDLWindowDeleter::SDLWindowDeleter",0,0)
  result = (ca2d::SDLWindowDeleter *)new ca2d::SDLWindowDeleter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__SDLWindowDeleter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SDLWindowDeleter(void *obj) {
ca2d::SDLWindowDeleter *arg1 = (ca2d::SDLWindowDeleter *) obj;
delete arg1;
}
static int _proxy__wrap_new_SDLWindowDeleter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SDLWindowDeleter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SDLWindowDeleter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SDLWindowDeleter_methods[]= {
    { "__call", _wrap_SDLWindowDeleter___call},
    {0,0}
};
static swig_lua_method swig_SDLWindowDeleter_meta[] = {
    { "__call", _wrap_SDLWindowDeleter___call},
    {0,0}
};

static swig_lua_attribute swig_SDLWindowDeleter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SDLWindowDeleter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SDLWindowDeleter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SDLWindowDeleter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SDLWindowDeleter_Sf_SwigStatic = {
    "SDLWindowDeleter",
    swig_SDLWindowDeleter_Sf_SwigStatic_methods,
    swig_SDLWindowDeleter_Sf_SwigStatic_attributes,
    swig_SDLWindowDeleter_Sf_SwigStatic_constants,
    swig_SDLWindowDeleter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SDLWindowDeleter_bases[] = {0};
static const char *swig_SDLWindowDeleter_base_names[] = {0};
static swig_lua_class _wrap_class_SDLWindowDeleter = { "SDLWindowDeleter", "SDLWindowDeleter", &SWIGTYPE_p_ca2d__SDLWindowDeleter,_proxy__wrap_new_SDLWindowDeleter, swig_delete_SDLWindowDeleter, swig_SDLWindowDeleter_methods, swig_SDLWindowDeleter_attributes, &swig_SDLWindowDeleter_Sf_SwigStatic, swig_SDLWindowDeleter_meta, swig_SDLWindowDeleter_bases, swig_SDLWindowDeleter_base_names };

static int _wrap_SDLContextDeleter___call(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::SDLContextDeleter *arg1 = (ca2d::SDLContextDeleter *) 0 ;
  SDL_GLContext arg2 ;
  SDL_GLContext *argp2 ;
  
  SWIG_check_num_args("ca2d::SDLContextDeleter::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::SDLContextDeleter::operator ()",1,"ca2d::SDLContextDeleter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::SDLContextDeleter::operator ()",2,"SDL_GLContext");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__SDLContextDeleter,0))){
    SWIG_fail_ptr("SDLContextDeleter___call",1,SWIGTYPE_p_ca2d__SDLContextDeleter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SDL_GLContext,0))){
    SWIG_fail_ptr("SDLContextDeleter___call",2,SWIGTYPE_p_SDL_GLContext);
  }
  arg2 = *argp2;
  
  (arg1)->operator ()(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SDLContextDeleter(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::SDLContextDeleter *result = 0 ;
  
  SWIG_check_num_args("ca2d::SDLContextDeleter::SDLContextDeleter",0,0)
  result = (ca2d::SDLContextDeleter *)new ca2d::SDLContextDeleter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__SDLContextDeleter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SDLContextDeleter(void *obj) {
ca2d::SDLContextDeleter *arg1 = (ca2d::SDLContextDeleter *) obj;
delete arg1;
}
static int _proxy__wrap_new_SDLContextDeleter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SDLContextDeleter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SDLContextDeleter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SDLContextDeleter_methods[]= {
    { "__call", _wrap_SDLContextDeleter___call},
    {0,0}
};
static swig_lua_method swig_SDLContextDeleter_meta[] = {
    { "__call", _wrap_SDLContextDeleter___call},
    {0,0}
};

static swig_lua_attribute swig_SDLContextDeleter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SDLContextDeleter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SDLContextDeleter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SDLContextDeleter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SDLContextDeleter_Sf_SwigStatic = {
    "SDLContextDeleter",
    swig_SDLContextDeleter_Sf_SwigStatic_methods,
    swig_SDLContextDeleter_Sf_SwigStatic_attributes,
    swig_SDLContextDeleter_Sf_SwigStatic_constants,
    swig_SDLContextDeleter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SDLContextDeleter_bases[] = {0};
static const char *swig_SDLContextDeleter_base_names[] = {0};
static swig_lua_class _wrap_class_SDLContextDeleter = { "SDLContextDeleter", "SDLContextDeleter", &SWIGTYPE_p_ca2d__SDLContextDeleter,_proxy__wrap_new_SDLContextDeleter, swig_delete_SDLContextDeleter, swig_SDLContextDeleter_methods, swig_SDLContextDeleter_attributes, &swig_SDLContextDeleter_Sf_SwigStatic, swig_SDLContextDeleter_meta, swig_SDLContextDeleter_bases, swig_SDLContextDeleter_base_names };

static int _wrap_new_OpenGLWindow(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  ca2d::OpenGLWindow *result = 0 ;
  
  SWIG_check_num_args("ca2d::OpenGLWindow::OpenGLWindow",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ca2d::OpenGLWindow::OpenGLWindow",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::OpenGLWindow::OpenGLWindow",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (ca2d::OpenGLWindow *)new ca2d::OpenGLWindow(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__OpenGLWindow,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenGLWindow_swap(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::OpenGLWindow *arg1 = (ca2d::OpenGLWindow *) 0 ;
  
  SWIG_check_num_args("ca2d::OpenGLWindow::swap",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::OpenGLWindow::swap",1,"ca2d::OpenGLWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__OpenGLWindow,0))){
    SWIG_fail_ptr("OpenGLWindow_swap",1,SWIGTYPE_p_ca2d__OpenGLWindow);
  }
  
  (arg1)->swap();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenGLWindow_setTitle(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::OpenGLWindow *arg1 = (ca2d::OpenGLWindow *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ca2d::OpenGLWindow::setTitle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::OpenGLWindow::setTitle",1,"ca2d::OpenGLWindow *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::OpenGLWindow::setTitle",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__OpenGLWindow,0))){
    SWIG_fail_ptr("OpenGLWindow_setTitle",1,SWIGTYPE_p_ca2d__OpenGLWindow);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->setTitle((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_OpenGLWindow_makeContextCurrent(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::OpenGLWindow *arg1 = (ca2d::OpenGLWindow *) 0 ;
  
  SWIG_check_num_args("ca2d::OpenGLWindow::makeContextCurrent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::OpenGLWindow::makeContextCurrent",1,"ca2d::OpenGLWindow *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__OpenGLWindow,0))){
    SWIG_fail_ptr("OpenGLWindow_makeContextCurrent",1,SWIGTYPE_p_ca2d__OpenGLWindow);
  }
  
  (arg1)->makeContextCurrent();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OpenGLWindow(void *obj) {
ca2d::OpenGLWindow *arg1 = (ca2d::OpenGLWindow *) obj;
delete arg1;
}
static int _proxy__wrap_new_OpenGLWindow(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OpenGLWindow);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OpenGLWindow_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OpenGLWindow_methods[]= {
    { "swap", _wrap_OpenGLWindow_swap},
    { "setTitle", _wrap_OpenGLWindow_setTitle},
    { "makeContextCurrent", _wrap_OpenGLWindow_makeContextCurrent},
    {0,0}
};
static swig_lua_method swig_OpenGLWindow_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OpenGLWindow_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OpenGLWindow_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OpenGLWindow_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OpenGLWindow_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OpenGLWindow_Sf_SwigStatic = {
    "OpenGLWindow",
    swig_OpenGLWindow_Sf_SwigStatic_methods,
    swig_OpenGLWindow_Sf_SwigStatic_attributes,
    swig_OpenGLWindow_Sf_SwigStatic_constants,
    swig_OpenGLWindow_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OpenGLWindow_bases[] = {0};
static const char *swig_OpenGLWindow_base_names[] = {0};
static swig_lua_class _wrap_class_OpenGLWindow = { "OpenGLWindow", "OpenGLWindow", &SWIGTYPE_p_ca2d__OpenGLWindow,_proxy__wrap_new_OpenGLWindow, swig_delete_OpenGLWindow, swig_OpenGLWindow_methods, swig_OpenGLWindow_attributes, &swig_OpenGLWindow_Sf_SwigStatic, swig_OpenGLWindow_meta, swig_OpenGLWindow_bases, swig_OpenGLWindow_base_names };

static int _wrap_new_ConsoleSystem(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::ConsoleSystem *result = 0 ;
  
  SWIG_check_num_args("ca2d::ConsoleSystem::ConsoleSystem",0,0)
  result = (ca2d::ConsoleSystem *)new ca2d::ConsoleSystem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__ConsoleSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ConsoleSystem(void *obj) {
ca2d::ConsoleSystem *arg1 = (ca2d::ConsoleSystem *) obj;
delete arg1;
}
static int _proxy__wrap_new_ConsoleSystem(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ConsoleSystem);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ConsoleSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ConsoleSystem_methods[]= {
    {0,0}
};
static swig_lua_method swig_ConsoleSystem_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ConsoleSystem_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ConsoleSystem_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ConsoleSystem_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ConsoleSystem_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ConsoleSystem_Sf_SwigStatic = {
    "ConsoleSystem",
    swig_ConsoleSystem_Sf_SwigStatic_methods,
    swig_ConsoleSystem_Sf_SwigStatic_attributes,
    swig_ConsoleSystem_Sf_SwigStatic_constants,
    swig_ConsoleSystem_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ConsoleSystem_bases[] = {0};
static const char *swig_ConsoleSystem_base_names[] = {0};
static swig_lua_class _wrap_class_ConsoleSystem = { "ConsoleSystem", "ConsoleSystem", &SWIGTYPE_p_ca2d__ConsoleSystem,_proxy__wrap_new_ConsoleSystem, swig_delete_ConsoleSystem, swig_ConsoleSystem_methods, swig_ConsoleSystem_attributes, &swig_ConsoleSystem_Sf_SwigStatic, swig_ConsoleSystem_meta, swig_ConsoleSystem_bases, swig_ConsoleSystem_base_names };

static int _wrap_GLBufferDeleter___call(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLBufferDeleter *arg1 = (ca2d::GLBufferDeleter *) 0 ;
  GLuint arg2 ;
  GLuint *argp2 ;
  
  SWIG_check_num_args("ca2d::GLBufferDeleter::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLBufferDeleter::operator ()",1,"ca2d::GLBufferDeleter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::GLBufferDeleter::operator ()",2,"GLuint");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLBufferDeleter,0))){
    SWIG_fail_ptr("GLBufferDeleter___call",1,SWIGTYPE_p_ca2d__GLBufferDeleter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLuint,0))){
    SWIG_fail_ptr("GLBufferDeleter___call",2,SWIGTYPE_p_GLuint);
  }
  arg2 = *argp2;
  
  (arg1)->operator ()(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLBufferDeleter(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLBufferDeleter *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLBufferDeleter::GLBufferDeleter",0,0)
  result = (ca2d::GLBufferDeleter *)new ca2d::GLBufferDeleter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLBufferDeleter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GLBufferDeleter(void *obj) {
ca2d::GLBufferDeleter *arg1 = (ca2d::GLBufferDeleter *) obj;
delete arg1;
}
static int _proxy__wrap_new_GLBufferDeleter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GLBufferDeleter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GLBufferDeleter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GLBufferDeleter_methods[]= {
    { "__call", _wrap_GLBufferDeleter___call},
    {0,0}
};
static swig_lua_method swig_GLBufferDeleter_meta[] = {
    { "__call", _wrap_GLBufferDeleter___call},
    {0,0}
};

static swig_lua_attribute swig_GLBufferDeleter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GLBufferDeleter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GLBufferDeleter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GLBufferDeleter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GLBufferDeleter_Sf_SwigStatic = {
    "GLBufferDeleter",
    swig_GLBufferDeleter_Sf_SwigStatic_methods,
    swig_GLBufferDeleter_Sf_SwigStatic_attributes,
    swig_GLBufferDeleter_Sf_SwigStatic_constants,
    swig_GLBufferDeleter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GLBufferDeleter_bases[] = {0};
static const char *swig_GLBufferDeleter_base_names[] = {0};
static swig_lua_class _wrap_class_GLBufferDeleter = { "GLBufferDeleter", "GLBufferDeleter", &SWIGTYPE_p_ca2d__GLBufferDeleter,_proxy__wrap_new_GLBufferDeleter, swig_delete_GLBufferDeleter, swig_GLBufferDeleter_methods, swig_GLBufferDeleter_attributes, &swig_GLBufferDeleter_Sf_SwigStatic, swig_GLBufferDeleter_meta, swig_GLBufferDeleter_bases, swig_GLBufferDeleter_base_names };

static int _wrap_new_GLBufferObject__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  GLenum arg3 ;
  GLenum *argp3 ;
  ca2d::GLBufferObject *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLBufferObject::GLBufferObject",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLBufferObject::GLBufferObject",1,"void const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::GLBufferObject::GLBufferObject",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ca2d::GLBufferObject::GLBufferObject",3,"GLenum");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"new_GLBufferObject");
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("new_GLBufferObject",3,SWIGTYPE_p_GLenum);
  }
  arg3 = *argp3;
  
  result = (ca2d::GLBufferObject *)new ca2d::GLBufferObject((void const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLBufferObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLBufferObject__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  ca2d::GLBufferObject *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLBufferObject::GLBufferObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLBufferObject::GLBufferObject",1,"void const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::GLBufferObject::GLBufferObject",2,"size_t");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"new_GLBufferObject");
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (ca2d::GLBufferObject *)new ca2d::GLBufferObject((void const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLBufferObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLBufferObject__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  ca2d::GLBufferObject *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLBufferObject::GLBufferObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLBufferObject::GLBufferObject",1,"void const *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"new_GLBufferObject");
  result = (ca2d::GLBufferObject *)new ca2d::GLBufferObject((void const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLBufferObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLBufferObject__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLBufferObject *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLBufferObject::GLBufferObject",0,0)
  result = (ca2d::GLBufferObject *)new ca2d::GLBufferObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLBufferObject,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLBufferObject(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_GLBufferObject__SWIG_3(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_GLBufferObject__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_GLBufferObject__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, 0, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_GLBufferObject__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_GLBufferObject'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ca2d::GLBufferObject::GLBufferObject(void const *,size_t,GLenum)\n"
    "    ca2d::GLBufferObject::GLBufferObject(void const *,size_t)\n"
    "    ca2d::GLBufferObject::GLBufferObject(void const *)\n"
    "    ca2d::GLBufferObject::GLBufferObject()\n");
  lua_error(L);return 0;
}


static int _wrap_GLBufferObject_upload__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLBufferObject *arg1 = (ca2d::GLBufferObject *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  GLenum arg4 ;
  GLenum *argp4 ;
  
  SWIG_check_num_args("ca2d::GLBufferObject::upload",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLBufferObject::upload",1,"ca2d::GLBufferObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ca2d::GLBufferObject::upload",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ca2d::GLBufferObject::upload",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ca2d::GLBufferObject::upload",4,"GLenum");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLBufferObject,0))){
    SWIG_fail_ptr("GLBufferObject_upload",1,SWIGTYPE_p_ca2d__GLBufferObject);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"GLBufferObject_upload");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("GLBufferObject_upload",4,SWIGTYPE_p_GLenum);
  }
  arg4 = *argp4;
  
  (arg1)->upload((void const *)arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLBufferObject_upload__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLBufferObject *arg1 = (ca2d::GLBufferObject *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("ca2d::GLBufferObject::upload",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLBufferObject::upload",1,"ca2d::GLBufferObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ca2d::GLBufferObject::upload",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ca2d::GLBufferObject::upload",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLBufferObject,0))){
    SWIG_fail_ptr("GLBufferObject_upload",1,SWIGTYPE_p_ca2d__GLBufferObject);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"GLBufferObject_upload");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->upload((void const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLBufferObject_upload__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLBufferObject *arg1 = (ca2d::GLBufferObject *) 0 ;
  void *arg2 = (void *) 0 ;
  
  SWIG_check_num_args("ca2d::GLBufferObject::upload",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLBufferObject::upload",1,"ca2d::GLBufferObject *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ca2d::GLBufferObject::upload",2,"void const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLBufferObject,0))){
    SWIG_fail_ptr("GLBufferObject_upload",1,SWIGTYPE_p_ca2d__GLBufferObject);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"GLBufferObject_upload");
  (arg1)->upload((void const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLBufferObject_upload__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLBufferObject *arg1 = (ca2d::GLBufferObject *) 0 ;
  
  SWIG_check_num_args("ca2d::GLBufferObject::upload",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLBufferObject::upload",1,"ca2d::GLBufferObject *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLBufferObject,0))){
    SWIG_fail_ptr("GLBufferObject_upload",1,SWIGTYPE_p_ca2d__GLBufferObject);
  }
  
  (arg1)->upload();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLBufferObject_upload(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__GLBufferObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GLBufferObject_upload__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__GLBufferObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GLBufferObject_upload__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__GLBufferObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GLBufferObject_upload__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__GLBufferObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_GLBufferObject_upload__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GLBufferObject_upload'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ca2d::GLBufferObject::upload(void const *,size_t,GLenum)\n"
    "    ca2d::GLBufferObject::upload(void const *,size_t)\n"
    "    ca2d::GLBufferObject::upload(void const *)\n"
    "    ca2d::GLBufferObject::upload()\n");
  lua_error(L);return 0;
}


static void swig_delete_GLBufferObject(void *obj) {
ca2d::GLBufferObject *arg1 = (ca2d::GLBufferObject *) obj;
delete arg1;
}
static int _proxy__wrap_new_GLBufferObject(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GLBufferObject);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GLBufferObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GLBufferObject_methods[]= {
    { "upload", _wrap_GLBufferObject_upload},
    {0,0}
};
static swig_lua_method swig_GLBufferObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GLBufferObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GLBufferObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GLBufferObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GLBufferObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GLBufferObject_Sf_SwigStatic = {
    "GLBufferObject",
    swig_GLBufferObject_Sf_SwigStatic_methods,
    swig_GLBufferObject_Sf_SwigStatic_attributes,
    swig_GLBufferObject_Sf_SwigStatic_constants,
    swig_GLBufferObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GLBufferObject_bases[] = {0};
static const char *swig_GLBufferObject_base_names[] = {0};
static swig_lua_class _wrap_class_GLBufferObject = { "GLBufferObject", "GLBufferObject", &SWIGTYPE_p_ca2d__GLBufferObject,_proxy__wrap_new_GLBufferObject, swig_delete_GLBufferObject, swig_GLBufferObject_methods, swig_GLBufferObject_attributes, &swig_GLBufferObject_Sf_SwigStatic, swig_GLBufferObject_meta, swig_GLBufferObject_bases, swig_GLBufferObject_base_names };

static int _wrap_compileShader(lua_State* L) {
  int SWIG_arg = 0;
  GLuint arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  GLuint *argp1 ;
  bool result;
  
  SWIG_check_num_args("ca2d::compileShader",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ca2d::compileShader",1,"GLuint");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::compileShader",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ca2d::compileShader",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_GLuint,0))){
    SWIG_fail_ptr("compileShader",1,SWIGTYPE_p_GLuint);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)ca2d::compileShader(arg1,(char const *)arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderDeleter___call(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderDeleter *arg1 = (ca2d::GLShaderDeleter *) 0 ;
  GLuint arg2 ;
  GLuint *argp2 ;
  
  SWIG_check_num_args("ca2d::GLShaderDeleter::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderDeleter::operator ()",1,"ca2d::GLShaderDeleter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::GLShaderDeleter::operator ()",2,"GLuint");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderDeleter,0))){
    SWIG_fail_ptr("GLShaderDeleter___call",1,SWIGTYPE_p_ca2d__GLShaderDeleter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLuint,0))){
    SWIG_fail_ptr("GLShaderDeleter___call",2,SWIGTYPE_p_GLuint);
  }
  arg2 = *argp2;
  
  (arg1)->operator ()(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLShaderDeleter(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderDeleter *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLShaderDeleter::GLShaderDeleter",0,0)
  result = (ca2d::GLShaderDeleter *)new ca2d::GLShaderDeleter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLShaderDeleter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GLShaderDeleter(void *obj) {
ca2d::GLShaderDeleter *arg1 = (ca2d::GLShaderDeleter *) obj;
delete arg1;
}
static int _proxy__wrap_new_GLShaderDeleter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GLShaderDeleter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GLShaderDeleter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GLShaderDeleter_methods[]= {
    { "__call", _wrap_GLShaderDeleter___call},
    {0,0}
};
static swig_lua_method swig_GLShaderDeleter_meta[] = {
    { "__call", _wrap_GLShaderDeleter___call},
    {0,0}
};

static swig_lua_attribute swig_GLShaderDeleter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GLShaderDeleter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GLShaderDeleter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GLShaderDeleter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GLShaderDeleter_Sf_SwigStatic = {
    "GLShaderDeleter",
    swig_GLShaderDeleter_Sf_SwigStatic_methods,
    swig_GLShaderDeleter_Sf_SwigStatic_attributes,
    swig_GLShaderDeleter_Sf_SwigStatic_constants,
    swig_GLShaderDeleter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GLShaderDeleter_bases[] = {0};
static const char *swig_GLShaderDeleter_base_names[] = {0};
static swig_lua_class _wrap_class_GLShaderDeleter = { "GLShaderDeleter", "GLShaderDeleter", &SWIGTYPE_p_ca2d__GLShaderDeleter,_proxy__wrap_new_GLShaderDeleter, swig_delete_GLShaderDeleter, swig_GLShaderDeleter_methods, swig_GLShaderDeleter_attributes, &swig_GLShaderDeleter_Sf_SwigStatic, swig_GLShaderDeleter_meta, swig_GLShaderDeleter_bases, swig_GLShaderDeleter_base_names };

static int _wrap_new_GLShader(lua_State* L) {
  int SWIG_arg = 0;
  GLuint arg1 ;
  char *arg2 = (char *) 0 ;
  GLuint *argp1 ;
  ca2d::GLShader *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLShader::GLShader",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ca2d::GLShader::GLShader",1,"GLuint");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::GLShader::GLShader",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_GLuint,0))){
    SWIG_fail_ptr("new_GLShader",1,SWIGTYPE_p_GLuint);
  }
  arg1 = *argp1;
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (ca2d::GLShader *)new ca2d::GLShader(arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLShader,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShader_isValid(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShader *arg1 = (ca2d::GLShader *) 0 ;
  bool result;
  
  SWIG_check_num_args("ca2d::GLShader::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShader::isValid",1,"ca2d::GLShader const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShader,0))){
    SWIG_fail_ptr("GLShader_isValid",1,SWIGTYPE_p_ca2d__GLShader);
  }
  
  result = (bool)((ca2d::GLShader const *)arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GLShader(void *obj) {
ca2d::GLShader *arg1 = (ca2d::GLShader *) obj;
delete arg1;
}
static int _proxy__wrap_new_GLShader(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GLShader);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GLShader_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GLShader_methods[]= {
    { "isValid", _wrap_GLShader_isValid},
    {0,0}
};
static swig_lua_method swig_GLShader_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GLShader_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GLShader_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GLShader_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GLShader_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GLShader_Sf_SwigStatic = {
    "GLShader",
    swig_GLShader_Sf_SwigStatic_methods,
    swig_GLShader_Sf_SwigStatic_attributes,
    swig_GLShader_Sf_SwigStatic_constants,
    swig_GLShader_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GLShader_bases[] = {0};
static const char *swig_GLShader_base_names[] = {0};
static swig_lua_class _wrap_class_GLShader = { "GLShader", "GLShader", &SWIGTYPE_p_ca2d__GLShader,_proxy__wrap_new_GLShader, swig_delete_GLShader, swig_GLShader_methods, swig_GLShader_attributes, &swig_GLShader_Sf_SwigStatic, swig_GLShader_meta, swig_GLShader_bases, swig_GLShader_base_names };

static int _wrap_GLShaderProgramDeleter___call(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgramDeleter *arg1 = (ca2d::GLShaderProgramDeleter *) 0 ;
  GLuint arg2 ;
  GLuint *argp2 ;
  
  SWIG_check_num_args("ca2d::GLShaderProgramDeleter::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgramDeleter::operator ()",1,"ca2d::GLShaderProgramDeleter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::GLShaderProgramDeleter::operator ()",2,"GLuint");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgramDeleter,0))){
    SWIG_fail_ptr("GLShaderProgramDeleter___call",1,SWIGTYPE_p_ca2d__GLShaderProgramDeleter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLuint,0))){
    SWIG_fail_ptr("GLShaderProgramDeleter___call",2,SWIGTYPE_p_GLuint);
  }
  arg2 = *argp2;
  
  (arg1)->operator ()(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLShaderProgramDeleter(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgramDeleter *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLShaderProgramDeleter::GLShaderProgramDeleter",0,0)
  result = (ca2d::GLShaderProgramDeleter *)new ca2d::GLShaderProgramDeleter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLShaderProgramDeleter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GLShaderProgramDeleter(void *obj) {
ca2d::GLShaderProgramDeleter *arg1 = (ca2d::GLShaderProgramDeleter *) obj;
delete arg1;
}
static int _proxy__wrap_new_GLShaderProgramDeleter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GLShaderProgramDeleter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GLShaderProgramDeleter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GLShaderProgramDeleter_methods[]= {
    { "__call", _wrap_GLShaderProgramDeleter___call},
    {0,0}
};
static swig_lua_method swig_GLShaderProgramDeleter_meta[] = {
    { "__call", _wrap_GLShaderProgramDeleter___call},
    {0,0}
};

static swig_lua_attribute swig_GLShaderProgramDeleter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GLShaderProgramDeleter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GLShaderProgramDeleter_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GLShaderProgramDeleter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GLShaderProgramDeleter_Sf_SwigStatic = {
    "GLShaderProgramDeleter",
    swig_GLShaderProgramDeleter_Sf_SwigStatic_methods,
    swig_GLShaderProgramDeleter_Sf_SwigStatic_attributes,
    swig_GLShaderProgramDeleter_Sf_SwigStatic_constants,
    swig_GLShaderProgramDeleter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GLShaderProgramDeleter_bases[] = {0};
static const char *swig_GLShaderProgramDeleter_base_names[] = {0};
static swig_lua_class _wrap_class_GLShaderProgramDeleter = { "GLShaderProgramDeleter", "GLShaderProgramDeleter", &SWIGTYPE_p_ca2d__GLShaderProgramDeleter,_proxy__wrap_new_GLShaderProgramDeleter, swig_delete_GLShaderProgramDeleter, swig_GLShaderProgramDeleter_methods, swig_GLShaderProgramDeleter_attributes, &swig_GLShaderProgramDeleter_Sf_SwigStatic, swig_GLShaderProgramDeleter_meta, swig_GLShaderProgramDeleter_bases, swig_GLShaderProgramDeleter_base_names };

static int _wrap_new_GLShaderProgram(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ca2d::GLShaderProgram *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::GLShaderProgram",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::GLShaderProgram",1,"char const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::GLShaderProgram::GLShaderProgram",2,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (ca2d::GLShaderProgram *)new ca2d::GLShaderProgram((char const *)arg1,(char const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLShaderProgram,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderProgram_bind(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) 0 ;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::bind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::bind",1,"ca2d::GLShaderProgram const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgram,0))){
    SWIG_fail_ptr("GLShaderProgram_bind",1,SWIGTYPE_p_ca2d__GLShaderProgram);
  }
  
  ((ca2d::GLShaderProgram const *)arg1)->bind();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderProgram_unbind(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) 0 ;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::unbind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::unbind",1,"ca2d::GLShaderProgram const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgram,0))){
    SWIG_fail_ptr("GLShaderProgram_unbind",1,SWIGTYPE_p_ca2d__GLShaderProgram);
  }
  
  ((ca2d::GLShaderProgram const *)arg1)->unbind();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderProgram_isValid(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) 0 ;
  bool result;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::isValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::isValid",1,"ca2d::GLShaderProgram const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgram,0))){
    SWIG_fail_ptr("GLShaderProgram_isValid",1,SWIGTYPE_p_ca2d__GLShaderProgram);
  }
  
  result = (bool)((ca2d::GLShaderProgram const *)arg1)->isValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderProgram_getAttributeLocation(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  GLint result;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::getAttributeLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::getAttributeLocation",1,"ca2d::GLShaderProgram const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::GLShaderProgram::getAttributeLocation",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgram,0))){
    SWIG_fail_ptr("GLShaderProgram_getAttributeLocation",1,SWIGTYPE_p_ca2d__GLShaderProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((ca2d::GLShaderProgram const *)arg1)->getAttributeLocation((char const *)arg2);
  {
    GLint * resultptr = new GLint((const GLint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderProgram_enableAttribute(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  GLint result;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::enableAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::enableAttribute",1,"ca2d::GLShaderProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::GLShaderProgram::enableAttribute",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgram,0))){
    SWIG_fail_ptr("GLShaderProgram_enableAttribute",1,SWIGTYPE_p_ca2d__GLShaderProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->enableAttribute((char const *)arg2);
  {
    GLint * resultptr = new GLint((const GLint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderProgram_disableAttribute(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::disableAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::disableAttribute",1,"ca2d::GLShaderProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::GLShaderProgram::disableAttribute",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgram,0))){
    SWIG_fail_ptr("GLShaderProgram_disableAttribute",1,SWIGTYPE_p_ca2d__GLShaderProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->disableAttribute((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderProgram_getUniformLocation(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  GLint result;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::getUniformLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::getUniformLocation",1,"ca2d::GLShaderProgram const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::GLShaderProgram::getUniformLocation",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgram,0))){
    SWIG_fail_ptr("GLShaderProgram_getUniformLocation",1,SWIGTYPE_p_ca2d__GLShaderProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((ca2d::GLShaderProgram const *)arg1)->getUniformLocation((char const *)arg2);
  {
    GLint * resultptr = new GLint((const GLint &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderProgram_setUniformInt(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::setUniformInt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformInt",1,"ca2d::GLShaderProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformInt",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformInt",3,"int const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgram,0))){
    SWIG_fail_ptr("GLShaderProgram_setUniformInt",1,SWIGTYPE_p_ca2d__GLShaderProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (int const)lua_tonumber(L, 3);
  (arg1)->setUniformInt((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderProgram_setUniformFloat(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::setUniformFloat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformFloat",1,"ca2d::GLShaderProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformFloat",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformFloat",3,"float const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgram,0))){
    SWIG_fail_ptr("GLShaderProgram_setUniformFloat",1,SWIGTYPE_p_ca2d__GLShaderProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  (arg1)->setUniformFloat((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderProgram_setUniformVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec2 *arg3 = 0 ;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::setUniformVector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformVector",1,"ca2d::GLShaderProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformVector",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformVector",3,"glm::vec2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgram,0))){
    SWIG_fail_ptr("GLShaderProgram_setUniformVector",1,SWIGTYPE_p_ca2d__GLShaderProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_glm__vec2,0))){
    SWIG_fail_ptr("GLShaderProgram_setUniformVector",3,SWIGTYPE_p_glm__vec2);
  }
  
  (arg1)->setUniformVector((char const *)arg2,(glm::vec2 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderProgram_setUniformVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec3 *arg3 = 0 ;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::setUniformVector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformVector",1,"ca2d::GLShaderProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformVector",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformVector",3,"glm::vec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgram,0))){
    SWIG_fail_ptr("GLShaderProgram_setUniformVector",1,SWIGTYPE_p_ca2d__GLShaderProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_glm__vec3,0))){
    SWIG_fail_ptr("GLShaderProgram_setUniformVector",3,SWIGTYPE_p_glm__vec3);
  }
  
  (arg1)->setUniformVector((char const *)arg2,(glm::vec3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderProgram_setUniformVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::vec4 *arg3 = 0 ;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::setUniformVector",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformVector",1,"ca2d::GLShaderProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformVector",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformVector",3,"glm::vec4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgram,0))){
    SWIG_fail_ptr("GLShaderProgram_setUniformVector",1,SWIGTYPE_p_ca2d__GLShaderProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_glm__vec4,0))){
    SWIG_fail_ptr("GLShaderProgram_setUniformVector",3,SWIGTYPE_p_glm__vec4);
  }
  
  (arg1)->setUniformVector((char const *)arg2,(glm::vec4 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLShaderProgram_setUniformVector(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__GLShaderProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_glm__vec2, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_GLShaderProgram_setUniformVector__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__GLShaderProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_glm__vec3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_GLShaderProgram_setUniformVector__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__GLShaderProgram, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_glm__vec4, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_GLShaderProgram_setUniformVector__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GLShaderProgram_setUniformVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ca2d::GLShaderProgram::setUniformVector(char const *,glm::vec2 const &)\n"
    "    ca2d::GLShaderProgram::setUniformVector(char const *,glm::vec3 const &)\n"
    "    ca2d::GLShaderProgram::setUniformVector(char const *,glm::vec4 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GLShaderProgram_setUniformMatrix(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) 0 ;
  char *arg2 = (char *) 0 ;
  glm::mat4 *arg3 = 0 ;
  
  SWIG_check_num_args("ca2d::GLShaderProgram::setUniformMatrix",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformMatrix",1,"ca2d::GLShaderProgram *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformMatrix",2,"char const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ca2d::GLShaderProgram::setUniformMatrix",3,"glm::mat4 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLShaderProgram,0))){
    SWIG_fail_ptr("GLShaderProgram_setUniformMatrix",1,SWIGTYPE_p_ca2d__GLShaderProgram);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_glm__mat4,0))){
    SWIG_fail_ptr("GLShaderProgram_setUniformMatrix",3,SWIGTYPE_p_glm__mat4);
  }
  
  (arg1)->setUniformMatrix((char const *)arg2,(glm::mat4 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GLShaderProgram(void *obj) {
ca2d::GLShaderProgram *arg1 = (ca2d::GLShaderProgram *) obj;
delete arg1;
}
static int _proxy__wrap_new_GLShaderProgram(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GLShaderProgram);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GLShaderProgram_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GLShaderProgram_methods[]= {
    { "bind", _wrap_GLShaderProgram_bind},
    { "unbind", _wrap_GLShaderProgram_unbind},
    { "isValid", _wrap_GLShaderProgram_isValid},
    { "getAttributeLocation", _wrap_GLShaderProgram_getAttributeLocation},
    { "enableAttribute", _wrap_GLShaderProgram_enableAttribute},
    { "disableAttribute", _wrap_GLShaderProgram_disableAttribute},
    { "getUniformLocation", _wrap_GLShaderProgram_getUniformLocation},
    { "setUniformInt", _wrap_GLShaderProgram_setUniformInt},
    { "setUniformFloat", _wrap_GLShaderProgram_setUniformFloat},
    { "setUniformVector", _wrap_GLShaderProgram_setUniformVector},
    { "setUniformMatrix", _wrap_GLShaderProgram_setUniformMatrix},
    {0,0}
};
static swig_lua_method swig_GLShaderProgram_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GLShaderProgram_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GLShaderProgram_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GLShaderProgram_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GLShaderProgram_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GLShaderProgram_Sf_SwigStatic = {
    "GLShaderProgram",
    swig_GLShaderProgram_Sf_SwigStatic_methods,
    swig_GLShaderProgram_Sf_SwigStatic_attributes,
    swig_GLShaderProgram_Sf_SwigStatic_constants,
    swig_GLShaderProgram_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GLShaderProgram_bases[] = {0};
static const char *swig_GLShaderProgram_base_names[] = {0};
static swig_lua_class _wrap_class_GLShaderProgram = { "GLShaderProgram", "GLShaderProgram", &SWIGTYPE_p_ca2d__GLShaderProgram,_proxy__wrap_new_GLShaderProgram, swig_delete_GLShaderProgram, swig_GLShaderProgram_methods, swig_GLShaderProgram_attributes, &swig_GLShaderProgram_Sf_SwigStatic, swig_GLShaderProgram_meta, swig_GLShaderProgram_bases, swig_GLShaderProgram_base_names };

static int _wrap_new_GLTexture2D__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  GLint arg1 ;
  GLint arg2 ;
  GLint arg3 ;
  GLint arg4 ;
  GLint *argp1 ;
  GLint *argp2 ;
  GLint *argp3 ;
  GLint *argp4 ;
  ca2d::GLTexture2D *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::GLTexture2D",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",1,"GLint");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",2,"GLint");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",3,"GLint");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",4,"GLint");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",1,SWIGTYPE_p_GLint);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",2,SWIGTYPE_p_GLint);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",3,SWIGTYPE_p_GLint);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",4,SWIGTYPE_p_GLint);
  }
  arg4 = *argp4;
  
  result = (ca2d::GLTexture2D *)new ca2d::GLTexture2D(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLTexture2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLTexture2D__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  GLint arg1 ;
  GLint arg2 ;
  GLint arg3 ;
  GLint *argp1 ;
  GLint *argp2 ;
  GLint *argp3 ;
  ca2d::GLTexture2D *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::GLTexture2D",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",1,"GLint");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",2,"GLint");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",3,"GLint");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",1,SWIGTYPE_p_GLint);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",2,SWIGTYPE_p_GLint);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",3,SWIGTYPE_p_GLint);
  }
  arg3 = *argp3;
  
  result = (ca2d::GLTexture2D *)new ca2d::GLTexture2D(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLTexture2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLTexture2D__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  GLint arg1 ;
  GLint arg2 ;
  GLint *argp1 ;
  GLint *argp2 ;
  ca2d::GLTexture2D *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::GLTexture2D",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",1,"GLint");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",2,"GLint");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",1,SWIGTYPE_p_GLint);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",2,SWIGTYPE_p_GLint);
  }
  arg2 = *argp2;
  
  result = (ca2d::GLTexture2D *)new ca2d::GLTexture2D(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLTexture2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLTexture2D__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  GLint arg1 ;
  GLint *argp1 ;
  ca2d::GLTexture2D *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::GLTexture2D",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",1,"GLint");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",1,SWIGTYPE_p_GLint);
  }
  arg1 = *argp1;
  
  result = (ca2d::GLTexture2D *)new ca2d::GLTexture2D(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLTexture2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLTexture2D__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLTexture2D *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::GLTexture2D",0,0)
  result = (ca2d::GLTexture2D *)new ca2d::GLTexture2D();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLTexture2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLTexture2D__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  GLint arg2 ;
  GLint arg3 ;
  GLint arg4 ;
  GLint arg5 ;
  GLint *argp2 ;
  GLint *argp3 ;
  GLint *argp4 ;
  GLint *argp5 ;
  ca2d::GLTexture2D *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::GLTexture2D",5,5)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",2,"GLint");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",3,"GLint");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",4,"GLint");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",5,"GLint");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",2,SWIGTYPE_p_GLint);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",3,SWIGTYPE_p_GLint);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",4,SWIGTYPE_p_GLint);
  }
  arg4 = *argp4;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",5,SWIGTYPE_p_GLint);
  }
  arg5 = *argp5;
  
  result = (ca2d::GLTexture2D *)new ca2d::GLTexture2D((char const *)arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLTexture2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLTexture2D__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  GLint arg2 ;
  GLint arg3 ;
  GLint arg4 ;
  GLint *argp2 ;
  GLint *argp3 ;
  GLint *argp4 ;
  ca2d::GLTexture2D *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::GLTexture2D",4,4)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",2,"GLint");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",3,"GLint");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",4,"GLint");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",2,SWIGTYPE_p_GLint);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",3,SWIGTYPE_p_GLint);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",4,SWIGTYPE_p_GLint);
  }
  arg4 = *argp4;
  
  result = (ca2d::GLTexture2D *)new ca2d::GLTexture2D((char const *)arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLTexture2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLTexture2D__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  GLint arg2 ;
  GLint arg3 ;
  GLint *argp2 ;
  GLint *argp3 ;
  ca2d::GLTexture2D *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::GLTexture2D",3,3)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",2,"GLint");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",3,"GLint");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",2,SWIGTYPE_p_GLint);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",3,SWIGTYPE_p_GLint);
  }
  arg3 = *argp3;
  
  result = (ca2d::GLTexture2D *)new ca2d::GLTexture2D((char const *)arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLTexture2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLTexture2D__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  GLint arg2 ;
  GLint *argp2 ;
  ca2d::GLTexture2D *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::GLTexture2D",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",1,"char const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",2,"GLint");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLint,0))){
    SWIG_fail_ptr("new_GLTexture2D",2,SWIGTYPE_p_GLint);
  }
  arg2 = *argp2;
  
  result = (ca2d::GLTexture2D *)new ca2d::GLTexture2D((char const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLTexture2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLTexture2D__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ca2d::GLTexture2D *result = 0 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::GLTexture2D",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::GLTexture2D",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ca2d::GLTexture2D *)new ca2d::GLTexture2D((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__GLTexture2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_GLTexture2D(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_GLTexture2D__SWIG_4(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_GLTexture2D__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_GLTexture2D__SWIG_9(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_GLTexture2D__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_GLTexture2D__SWIG_8(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_GLTexture2D__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_GLTexture2D__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_GLTexture2D__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_GLTexture2D__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_GLint, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_GLTexture2D__SWIG_5(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_GLTexture2D'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ca2d::GLTexture2D::GLTexture2D(GLint,GLint,GLint,GLint)\n"
    "    ca2d::GLTexture2D::GLTexture2D(GLint,GLint,GLint)\n"
    "    ca2d::GLTexture2D::GLTexture2D(GLint,GLint)\n"
    "    ca2d::GLTexture2D::GLTexture2D(GLint)\n"
    "    ca2d::GLTexture2D::GLTexture2D()\n"
    "    ca2d::GLTexture2D::GLTexture2D(char const *,GLint,GLint,GLint,GLint)\n"
    "    ca2d::GLTexture2D::GLTexture2D(char const *,GLint,GLint,GLint)\n"
    "    ca2d::GLTexture2D::GLTexture2D(char const *,GLint,GLint)\n"
    "    ca2d::GLTexture2D::GLTexture2D(char const *,GLint)\n"
    "    ca2d::GLTexture2D::GLTexture2D(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_GLTexture2D_allocate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLTexture2D *arg1 = (ca2d::GLTexture2D *) 0 ;
  int arg2 ;
  int arg3 ;
  GLenum arg4 ;
  GLenum *argp4 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::allocate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::allocate",1,"ca2d::GLTexture2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::GLTexture2D::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ca2d::GLTexture2D::allocate",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ca2d::GLTexture2D::allocate",4,"GLenum");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLTexture2D,0))){
    SWIG_fail_ptr("GLTexture2D_allocate",1,SWIGTYPE_p_ca2d__GLTexture2D);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("GLTexture2D_allocate",4,SWIGTYPE_p_GLenum);
  }
  arg4 = *argp4;
  
  (arg1)->allocate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLTexture2D_allocate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLTexture2D *arg1 = (ca2d::GLTexture2D *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::allocate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::allocate",1,"ca2d::GLTexture2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::GLTexture2D::allocate",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ca2d::GLTexture2D::allocate",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLTexture2D,0))){
    SWIG_fail_ptr("GLTexture2D_allocate",1,SWIGTYPE_p_ca2d__GLTexture2D);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->allocate(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLTexture2D_allocate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__GLTexture2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_GLTexture2D_allocate__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__GLTexture2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_GLTexture2D_allocate__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GLTexture2D_allocate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ca2d::GLTexture2D::allocate(int,int,GLenum)\n"
    "    ca2d::GLTexture2D::allocate(int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_GLTexture2D_load__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLTexture2D *arg1 = (ca2d::GLTexture2D *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ca2d::GLTexture2D::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::load",1,"ca2d::GLTexture2D *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::GLTexture2D::load",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLTexture2D,0))){
    SWIG_fail_ptr("GLTexture2D_load",1,SWIGTYPE_p_ca2d__GLTexture2D);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->load((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLTexture2D_load__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLTexture2D *arg1 = (ca2d::GLTexture2D *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  SWIG_check_num_args("ca2d::GLTexture2D::load",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::load",1,"ca2d::GLTexture2D *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ca2d::GLTexture2D::load",2,"uint32_t *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ca2d::GLTexture2D::load",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ca2d::GLTexture2D::load",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLTexture2D,0))){
    SWIG_fail_ptr("GLTexture2D_load",1,SWIGTYPE_p_ca2d__GLTexture2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_uint32_t,0))){
    SWIG_fail_ptr("GLTexture2D_load",2,SWIGTYPE_p_uint32_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (bool)(arg1)->load(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLTexture2D_load(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__GLTexture2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_GLTexture2D_load__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__GLTexture2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_uint32_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_GLTexture2D_load__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GLTexture2D_load'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ca2d::GLTexture2D::load(char const *)\n"
    "    ca2d::GLTexture2D::load(uint32_t *,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_GLTexture2D_isLoaded(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLTexture2D *arg1 = (ca2d::GLTexture2D *) 0 ;
  bool result;
  
  SWIG_check_num_args("ca2d::GLTexture2D::isLoaded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::isLoaded",1,"ca2d::GLTexture2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLTexture2D,0))){
    SWIG_fail_ptr("GLTexture2D_isLoaded",1,SWIGTYPE_p_ca2d__GLTexture2D);
  }
  
  result = (bool)(arg1)->isLoaded();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLTexture2D_bind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLTexture2D *arg1 = (ca2d::GLTexture2D *) 0 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::bind",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::bind",1,"ca2d::GLTexture2D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLTexture2D,0))){
    SWIG_fail_ptr("GLTexture2D_bind",1,SWIGTYPE_p_ca2d__GLTexture2D);
  }
  
  ((ca2d::GLTexture2D const *)arg1)->bind();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLTexture2D_bind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLTexture2D *arg1 = (ca2d::GLTexture2D *) 0 ;
  GLenum arg2 ;
  GLenum *argp2 ;
  
  SWIG_check_num_args("ca2d::GLTexture2D::bind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::bind",1,"ca2d::GLTexture2D const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::GLTexture2D::bind",2,"GLenum");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLTexture2D,0))){
    SWIG_fail_ptr("GLTexture2D_bind",1,SWIGTYPE_p_ca2d__GLTexture2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLenum,0))){
    SWIG_fail_ptr("GLTexture2D_bind",2,SWIGTYPE_p_GLenum);
  }
  arg2 = *argp2;
  
  ((ca2d::GLTexture2D const *)arg1)->bind(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLTexture2D_bind(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__GLTexture2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_GLTexture2D_bind__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__GLTexture2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_GLenum, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_GLTexture2D_bind__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GLTexture2D_bind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ca2d::GLTexture2D::bind() const\n"
    "    ca2d::GLTexture2D::bind(GLenum) const\n");
  lua_error(L);return 0;
}


static int _wrap_GLTexture2D_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLTexture2D *arg1 = (ca2d::GLTexture2D *) 0 ;
  int result;
  
  SWIG_check_num_args("ca2d::GLTexture2D::getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::getWidth",1,"ca2d::GLTexture2D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLTexture2D,0))){
    SWIG_fail_ptr("GLTexture2D_getWidth",1,SWIGTYPE_p_ca2d__GLTexture2D);
  }
  
  result = (int)((ca2d::GLTexture2D const *)arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GLTexture2D_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::GLTexture2D *arg1 = (ca2d::GLTexture2D *) 0 ;
  int result;
  
  SWIG_check_num_args("ca2d::GLTexture2D::getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::GLTexture2D::getHeight",1,"ca2d::GLTexture2D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__GLTexture2D,0))){
    SWIG_fail_ptr("GLTexture2D_getHeight",1,SWIGTYPE_p_ca2d__GLTexture2D);
  }
  
  result = (int)((ca2d::GLTexture2D const *)arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GLTexture2D(void *obj) {
ca2d::GLTexture2D *arg1 = (ca2d::GLTexture2D *) obj;
delete arg1;
}
static int _proxy__wrap_new_GLTexture2D(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GLTexture2D);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GLTexture2D_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GLTexture2D_methods[]= {
    { "allocate", _wrap_GLTexture2D_allocate},
    { "load", _wrap_GLTexture2D_load},
    { "isLoaded", _wrap_GLTexture2D_isLoaded},
    { "bind", _wrap_GLTexture2D_bind},
    { "getWidth", _wrap_GLTexture2D_getWidth},
    { "getHeight", _wrap_GLTexture2D_getHeight},
    {0,0}
};
static swig_lua_method swig_GLTexture2D_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GLTexture2D_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GLTexture2D_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GLTexture2D_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GLTexture2D_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GLTexture2D_Sf_SwigStatic = {
    "GLTexture2D",
    swig_GLTexture2D_Sf_SwigStatic_methods,
    swig_GLTexture2D_Sf_SwigStatic_attributes,
    swig_GLTexture2D_Sf_SwigStatic_constants,
    swig_GLTexture2D_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GLTexture2D_bases[] = {0};
static const char *swig_GLTexture2D_base_names[] = {0};
static swig_lua_class _wrap_class_GLTexture2D = { "GLTexture2D", "GLTexture2D", &SWIGTYPE_p_ca2d__GLTexture2D,_proxy__wrap_new_GLTexture2D, swig_delete_GLTexture2D, swig_GLTexture2D_methods, swig_GLTexture2D_attributes, &swig_GLTexture2D_Sf_SwigStatic, swig_GLTexture2D_meta, swig_GLTexture2D_bases, swig_GLTexture2D_base_names };

static int _wrap_new_SDL2Input(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Input::SDL2Input *result = 0 ;
  
  SWIG_check_num_args("Gwen::Input::SDL2Input::SDL2Input",0,0)
  result = (Gwen::Input::SDL2Input *)new Gwen::Input::SDL2Input();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Gwen__Input__SDL2Input,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Input_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Input::SDL2Input *arg1 = (Gwen::Input::SDL2Input *) 0 ;
  Gwen::Controls::Canvas *arg2 = (Gwen::Controls::Canvas *) 0 ;
  
  SWIG_check_num_args("Gwen::Input::SDL2Input::Initialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Input::SDL2Input::Initialize",1,"Gwen::Input::SDL2Input *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Input::SDL2Input::Initialize",2,"Gwen::Controls::Canvas *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Input__SDL2Input,0))){
    SWIG_fail_ptr("SDL2Input_Initialize",1,SWIGTYPE_p_Gwen__Input__SDL2Input);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__Controls__Canvas,0))){
    SWIG_fail_ptr("SDL2Input_Initialize",2,SWIGTYPE_p_Gwen__Controls__Canvas);
  }
  
  (arg1)->Initialize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Input_ProcessEvent(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Input::SDL2Input *arg1 = (Gwen::Input::SDL2Input *) 0 ;
  SDL_Event *arg2 = (SDL_Event *) 0 ;
  bool result;
  
  SWIG_check_num_args("Gwen::Input::SDL2Input::ProcessEvent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Input::SDL2Input::ProcessEvent",1,"Gwen::Input::SDL2Input *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Input::SDL2Input::ProcessEvent",2,"SDL_Event *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Input__SDL2Input,0))){
    SWIG_fail_ptr("SDL2Input_ProcessEvent",1,SWIGTYPE_p_Gwen__Input__SDL2Input);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SDL_Event,0))){
    SWIG_fail_ptr("SDL2Input_ProcessEvent",2,SWIGTYPE_p_SDL_Event);
  }
  
  result = (bool)(arg1)->ProcessEvent(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SDL2Input(void *obj) {
Gwen::Input::SDL2Input *arg1 = (Gwen::Input::SDL2Input *) obj;
delete arg1;
}
static int _proxy__wrap_new_SDL2Input(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SDL2Input);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SDL2Input_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SDL2Input_methods[]= {
    { "Initialize", _wrap_SDL2Input_Initialize},
    { "ProcessEvent", _wrap_SDL2Input_ProcessEvent},
    {0,0}
};
static swig_lua_method swig_SDL2Input_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SDL2Input_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SDL2Input_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SDL2Input_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SDL2Input_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SDL2Input_Sf_SwigStatic = {
    "SDL2Input",
    swig_SDL2Input_Sf_SwigStatic_methods,
    swig_SDL2Input_Sf_SwigStatic_attributes,
    swig_SDL2Input_Sf_SwigStatic_constants,
    swig_SDL2Input_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SDL2Input_bases[] = {0};
static const char *swig_SDL2Input_base_names[] = {0};
static swig_lua_class _wrap_class_SDL2Input = { "SDL2Input", "SDL2Input", &SWIGTYPE_p_Gwen__Input__SDL2Input,_proxy__wrap_new_SDL2Input, swig_delete_SDL2Input, swig_SDL2Input_methods, swig_SDL2Input_attributes, &swig_SDL2Input_Sf_SwigStatic, swig_SDL2Input_meta, swig_SDL2Input_bases, swig_SDL2Input_base_names };

static int _wrap_new_SDL2Renderer(lua_State* L) {
  int SWIG_arg = 0;
  SDL_Window *arg1 = (SDL_Window *) 0 ;
  Gwen::Renderer::SDL2Renderer *result = 0 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::SDL2Renderer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::SDL2Renderer",1,"SDL_Window *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SDL_Window,0))){
    SWIG_fail_ptr("new_SDL2Renderer",1,SWIGTYPE_p_SDL_Window);
  }
  
  result = (Gwen::Renderer::SDL2Renderer *)new Gwen::Renderer::SDL2Renderer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_SetDrawColor(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Color arg2 ;
  Gwen::Color *argp2 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::SetDrawColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::SetDrawColor",1,"Gwen::Renderer::SDL2Renderer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::SetDrawColor",2,"Gwen::Color");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_SetDrawColor",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Gwen__Color,0))){
    SWIG_fail_ptr("SDL2Renderer_SetDrawColor",2,SWIGTYPE_p_Gwen__Color);
  }
  arg2 = *argp2;
  
  (arg1)->SetDrawColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_DrawFilledRect(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Rect arg2 ;
  Gwen::Rect *argp2 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::DrawFilledRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawFilledRect",1,"Gwen::Renderer::SDL2Renderer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawFilledRect",2,"Gwen::Rect");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawFilledRect",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Gwen__Rect,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawFilledRect",2,SWIGTYPE_p_Gwen__Rect);
  }
  arg2 = *argp2;
  
  (arg1)->DrawFilledRect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_LoadFont(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Font *arg2 = (Gwen::Font *) 0 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::LoadFont",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::LoadFont",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::LoadFont",2,"Gwen::Font *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_LoadFont",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__Font,0))){
    SWIG_fail_ptr("SDL2Renderer_LoadFont",2,SWIGTYPE_p_Gwen__Font);
  }
  
  (arg1)->LoadFont(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_FreeFont(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Font *arg2 = (Gwen::Font *) 0 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::FreeFont",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::FreeFont",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::FreeFont",2,"Gwen::Font *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_FreeFont",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__Font,0))){
    SWIG_fail_ptr("SDL2Renderer_FreeFont",2,SWIGTYPE_p_Gwen__Font);
  }
  
  (arg1)->FreeFont(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_RenderText(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Font *arg2 = (Gwen::Font *) 0 ;
  Gwen::Point arg3 ;
  Gwen::String *arg4 = 0 ;
  Gwen::Point *argp3 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::RenderText",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::RenderText",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::RenderText",2,"Gwen::Font *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::RenderText",3,"Gwen::Point");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::RenderText",4,"Gwen::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_RenderText",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__Font,0))){
    SWIG_fail_ptr("SDL2Renderer_RenderText",2,SWIGTYPE_p_Gwen__Font);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Gwen__Point,0))){
    SWIG_fail_ptr("SDL2Renderer_RenderText",3,SWIGTYPE_p_Gwen__Point);
  }
  arg3 = *argp3;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Gwen__String,0))){
    SWIG_fail_ptr("SDL2Renderer_RenderText",4,SWIGTYPE_p_Gwen__String);
  }
  
  (arg1)->RenderText(arg2,arg3,(Gwen::String const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_MeasureText(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Font *arg2 = (Gwen::Font *) 0 ;
  Gwen::String *arg3 = 0 ;
  Gwen::Point result;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::MeasureText",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::MeasureText",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::MeasureText",2,"Gwen::Font *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::MeasureText",3,"Gwen::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_MeasureText",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__Font,0))){
    SWIG_fail_ptr("SDL2Renderer_MeasureText",2,SWIGTYPE_p_Gwen__Font);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Gwen__String,0))){
    SWIG_fail_ptr("SDL2Renderer_MeasureText",3,SWIGTYPE_p_Gwen__String);
  }
  
  result = (arg1)->MeasureText(arg2,(Gwen::String const &)*arg3);
  {
    Gwen::Point * resultptr = new Gwen::Point((const Gwen::Point &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Gwen__Point,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_StartClip(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::StartClip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::StartClip",1,"Gwen::Renderer::SDL2Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_StartClip",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  (arg1)->StartClip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_EndClip(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::EndClip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::EndClip",1,"Gwen::Renderer::SDL2Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_EndClip",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  (arg1)->EndClip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_DrawTexturedRect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Texture *arg2 = (Gwen::Texture *) 0 ;
  Gwen::Rect arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  Gwen::Rect *argp3 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",2,"Gwen::Texture *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",3,"Gwen::Rect");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__Texture,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",2,SWIGTYPE_p_Gwen__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Gwen__Rect,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",3,SWIGTYPE_p_Gwen__Rect);
  }
  arg3 = *argp3;
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  (arg1)->DrawTexturedRect(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_DrawTexturedRect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Texture *arg2 = (Gwen::Texture *) 0 ;
  Gwen::Rect arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  Gwen::Rect *argp3 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",2,"Gwen::Texture *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",3,"Gwen::Rect");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__Texture,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",2,SWIGTYPE_p_Gwen__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Gwen__Rect,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",3,SWIGTYPE_p_Gwen__Rect);
  }
  arg3 = *argp3;
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  (arg1)->DrawTexturedRect(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_DrawTexturedRect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Texture *arg2 = (Gwen::Texture *) 0 ;
  Gwen::Rect arg3 ;
  float arg4 ;
  float arg5 ;
  Gwen::Rect *argp3 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",2,"Gwen::Texture *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",3,"Gwen::Rect");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__Texture,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",2,SWIGTYPE_p_Gwen__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Gwen__Rect,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",3,SWIGTYPE_p_Gwen__Rect);
  }
  arg3 = *argp3;
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->DrawTexturedRect(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_DrawTexturedRect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Texture *arg2 = (Gwen::Texture *) 0 ;
  Gwen::Rect arg3 ;
  float arg4 ;
  Gwen::Rect *argp3 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",2,"Gwen::Texture *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",3,"Gwen::Rect");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__Texture,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",2,SWIGTYPE_p_Gwen__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Gwen__Rect,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",3,SWIGTYPE_p_Gwen__Rect);
  }
  arg3 = *argp3;
  
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->DrawTexturedRect(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_DrawTexturedRect__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Texture *arg2 = (Gwen::Texture *) 0 ;
  Gwen::Rect arg3 ;
  Gwen::Rect *argp3 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",2,"Gwen::Texture *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawTexturedRect",3,"Gwen::Rect");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__Texture,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",2,SWIGTYPE_p_Gwen__Texture);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_Gwen__Rect,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawTexturedRect",3,SWIGTYPE_p_Gwen__Rect);
  }
  arg3 = *argp3;
  
  (arg1)->DrawTexturedRect(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_DrawTexturedRect(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Gwen__Renderer__SDL2Renderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Gwen__Texture, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Gwen__Rect, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_SDL2Renderer_DrawTexturedRect__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Gwen__Renderer__SDL2Renderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Gwen__Texture, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Gwen__Rect, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_SDL2Renderer_DrawTexturedRect__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Gwen__Renderer__SDL2Renderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Gwen__Texture, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Gwen__Rect, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_SDL2Renderer_DrawTexturedRect__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Gwen__Renderer__SDL2Renderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Gwen__Texture, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Gwen__Rect, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_SDL2Renderer_DrawTexturedRect__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Gwen__Renderer__SDL2Renderer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Gwen__Texture, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Gwen__Rect, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_SDL2Renderer_DrawTexturedRect__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SDL2Renderer_DrawTexturedRect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Gwen::Renderer::SDL2Renderer::DrawTexturedRect(Gwen::Texture *,Gwen::Rect,float,float,float,float)\n"
    "    Gwen::Renderer::SDL2Renderer::DrawTexturedRect(Gwen::Texture *,Gwen::Rect,float,float,float)\n"
    "    Gwen::Renderer::SDL2Renderer::DrawTexturedRect(Gwen::Texture *,Gwen::Rect,float,float)\n"
    "    Gwen::Renderer::SDL2Renderer::DrawTexturedRect(Gwen::Texture *,Gwen::Rect,float)\n"
    "    Gwen::Renderer::SDL2Renderer::DrawTexturedRect(Gwen::Texture *,Gwen::Rect)\n");
  lua_error(L);return 0;
}


static int _wrap_SDL2Renderer_LoadTexture(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Texture *arg2 = (Gwen::Texture *) 0 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::LoadTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::LoadTexture",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::LoadTexture",2,"Gwen::Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_LoadTexture",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__Texture,0))){
    SWIG_fail_ptr("SDL2Renderer_LoadTexture",2,SWIGTYPE_p_Gwen__Texture);
  }
  
  (arg1)->LoadTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_FreeTexture(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Texture *arg2 = (Gwen::Texture *) 0 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::FreeTexture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::FreeTexture",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::FreeTexture",2,"Gwen::Texture *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_FreeTexture",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__Texture,0))){
    SWIG_fail_ptr("SDL2Renderer_FreeTexture",2,SWIGTYPE_p_Gwen__Texture);
  }
  
  (arg1)->FreeTexture(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_PixelColour(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Texture *arg2 = (Gwen::Texture *) 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  Gwen::Color *arg5 = 0 ;
  Gwen::Color result;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::PixelColour",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::PixelColour",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::PixelColour",2,"Gwen::Texture *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::PixelColour",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::PixelColour",4,"unsigned int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::PixelColour",5,"Gwen::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_PixelColour",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__Texture,0))){
    SWIG_fail_ptr("SDL2Renderer_PixelColour",2,SWIGTYPE_p_Gwen__Texture);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_Gwen__Color,0))){
    SWIG_fail_ptr("SDL2Renderer_PixelColour",5,SWIGTYPE_p_Gwen__Color);
  }
  
  result = (arg1)->PixelColour(arg2,arg3,arg4,(Gwen::Color const &)*arg5);
  {
    Gwen::Color * resultptr = new Gwen::Color((const Gwen::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Gwen__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_DrawLinedRect(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::Rect arg2 ;
  Gwen::Rect *argp2 ;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::DrawLinedRect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawLinedRect",1,"Gwen::Renderer::SDL2Renderer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::DrawLinedRect",2,"Gwen::Rect");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawLinedRect",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Gwen__Rect,0))){
    SWIG_fail_ptr("SDL2Renderer_DrawLinedRect",2,SWIGTYPE_p_Gwen__Rect);
  }
  arg2 = *argp2;
  
  (arg1)->DrawLinedRect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_BeginContext(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::WindowProvider *arg2 = (Gwen::WindowProvider *) 0 ;
  bool result;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::BeginContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::BeginContext",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::BeginContext",2,"Gwen::WindowProvider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_BeginContext",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__WindowProvider,0))){
    SWIG_fail_ptr("SDL2Renderer_BeginContext",2,SWIGTYPE_p_Gwen__WindowProvider);
  }
  
  result = (bool)(arg1)->BeginContext(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_EndContext(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::WindowProvider *arg2 = (Gwen::WindowProvider *) 0 ;
  bool result;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::EndContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::EndContext",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::EndContext",2,"Gwen::WindowProvider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_EndContext",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__WindowProvider,0))){
    SWIG_fail_ptr("SDL2Renderer_EndContext",2,SWIGTYPE_p_Gwen__WindowProvider);
  }
  
  result = (bool)(arg1)->EndContext(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SDL2Renderer_PresentContext(lua_State* L) {
  int SWIG_arg = 0;
  Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) 0 ;
  Gwen::WindowProvider *arg2 = (Gwen::WindowProvider *) 0 ;
  bool result;
  
  SWIG_check_num_args("Gwen::Renderer::SDL2Renderer::PresentContext",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::PresentContext",1,"Gwen::Renderer::SDL2Renderer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Gwen::Renderer::SDL2Renderer::PresentContext",2,"Gwen::WindowProvider *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,0))){
    SWIG_fail_ptr("SDL2Renderer_PresentContext",1,SWIGTYPE_p_Gwen__Renderer__SDL2Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Gwen__WindowProvider,0))){
    SWIG_fail_ptr("SDL2Renderer_PresentContext",2,SWIGTYPE_p_Gwen__WindowProvider);
  }
  
  result = (bool)(arg1)->PresentContext(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SDL2Renderer(void *obj) {
Gwen::Renderer::SDL2Renderer *arg1 = (Gwen::Renderer::SDL2Renderer *) obj;
delete arg1;
}
static int _proxy__wrap_new_SDL2Renderer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SDL2Renderer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SDL2Renderer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SDL2Renderer_methods[]= {
    { "SetDrawColor", _wrap_SDL2Renderer_SetDrawColor},
    { "DrawFilledRect", _wrap_SDL2Renderer_DrawFilledRect},
    { "LoadFont", _wrap_SDL2Renderer_LoadFont},
    { "FreeFont", _wrap_SDL2Renderer_FreeFont},
    { "RenderText", _wrap_SDL2Renderer_RenderText},
    { "MeasureText", _wrap_SDL2Renderer_MeasureText},
    { "StartClip", _wrap_SDL2Renderer_StartClip},
    { "EndClip", _wrap_SDL2Renderer_EndClip},
    { "DrawTexturedRect", _wrap_SDL2Renderer_DrawTexturedRect},
    { "LoadTexture", _wrap_SDL2Renderer_LoadTexture},
    { "FreeTexture", _wrap_SDL2Renderer_FreeTexture},
    { "PixelColour", _wrap_SDL2Renderer_PixelColour},
    { "DrawLinedRect", _wrap_SDL2Renderer_DrawLinedRect},
    { "BeginContext", _wrap_SDL2Renderer_BeginContext},
    { "EndContext", _wrap_SDL2Renderer_EndContext},
    { "PresentContext", _wrap_SDL2Renderer_PresentContext},
    {0,0}
};
static swig_lua_method swig_SDL2Renderer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SDL2Renderer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SDL2Renderer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SDL2Renderer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SDL2Renderer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SDL2Renderer_Sf_SwigStatic = {
    "SDL2Renderer",
    swig_SDL2Renderer_Sf_SwigStatic_methods,
    swig_SDL2Renderer_Sf_SwigStatic_attributes,
    swig_SDL2Renderer_Sf_SwigStatic_constants,
    swig_SDL2Renderer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SDL2Renderer_bases[] = {0};
static const char *swig_SDL2Renderer_base_names[] = {0};
static swig_lua_class _wrap_class_SDL2Renderer = { "SDL2Renderer", "SDL2Renderer", &SWIGTYPE_p_Gwen__Renderer__SDL2Renderer,_proxy__wrap_new_SDL2Renderer, swig_delete_SDL2Renderer, swig_SDL2Renderer_methods, swig_SDL2Renderer_attributes, &swig_SDL2Renderer_Sf_SwigStatic, swig_SDL2Renderer_meta, swig_SDL2Renderer_bases, swig_SDL2Renderer_base_names };

static int _wrap_new_Colour__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Colour *result = 0 ;
  
  SWIG_check_num_args("ca2d::Colour::Colour",0,0)
  result = (ca2d::Colour *)new ca2d::Colour();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__Colour,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Colour__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ca2d::Colour *result = 0 ;
  
  SWIG_check_num_args("ca2d::Colour::Colour",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ca2d::Colour::Colour",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::Colour::Colour",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ca2d::Colour::Colour",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ca2d::Colour::Colour",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (ca2d::Colour *)new ca2d::Colour(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__Colour,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Colour__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ca2d::Colour *result = 0 ;
  
  SWIG_check_num_args("ca2d::Colour::Colour",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ca2d::Colour::Colour",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::Colour::Colour",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ca2d::Colour::Colour",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (ca2d::Colour *)new ca2d::Colour(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__Colour,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Colour(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Colour__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Colour__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Colour__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Colour'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ca2d::Colour::Colour()\n"
    "    ca2d::Colour::Colour(float,float,float,float)\n"
    "    ca2d::Colour::Colour(float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_Colour_toUintARGB(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Colour *arg1 = (ca2d::Colour *) 0 ;
  uint32_t result;
  
  SWIG_check_num_args("ca2d::Colour::toUintARGB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Colour::toUintARGB",1,"ca2d::Colour const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Colour,0))){
    SWIG_fail_ptr("Colour_toUintARGB",1,SWIGTYPE_p_ca2d__Colour);
  }
  
  result = ((ca2d::Colour const *)arg1)->toUintARGB();
  {
    uint32_t * resultptr = new uint32_t((const uint32_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Colour_r_set(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Colour *arg1 = (ca2d::Colour *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ca2d::Colour::r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Colour::r",1,"ca2d::Colour *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::Colour::r",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Colour,0))){
    SWIG_fail_ptr("Colour_r_set",1,SWIGTYPE_p_ca2d__Colour);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Colour_r_get(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Colour *arg1 = (ca2d::Colour *) 0 ;
  float result;
  
  SWIG_check_num_args("ca2d::Colour::r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Colour::r",1,"ca2d::Colour *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Colour,0))){
    SWIG_fail_ptr("Colour_r_get",1,SWIGTYPE_p_ca2d__Colour);
  }
  
  result = (float) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Colour_g_set(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Colour *arg1 = (ca2d::Colour *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ca2d::Colour::g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Colour::g",1,"ca2d::Colour *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::Colour::g",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Colour,0))){
    SWIG_fail_ptr("Colour_g_set",1,SWIGTYPE_p_ca2d__Colour);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Colour_g_get(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Colour *arg1 = (ca2d::Colour *) 0 ;
  float result;
  
  SWIG_check_num_args("ca2d::Colour::g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Colour::g",1,"ca2d::Colour *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Colour,0))){
    SWIG_fail_ptr("Colour_g_get",1,SWIGTYPE_p_ca2d__Colour);
  }
  
  result = (float) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Colour_b_set(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Colour *arg1 = (ca2d::Colour *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ca2d::Colour::b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Colour::b",1,"ca2d::Colour *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::Colour::b",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Colour,0))){
    SWIG_fail_ptr("Colour_b_set",1,SWIGTYPE_p_ca2d__Colour);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Colour_b_get(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Colour *arg1 = (ca2d::Colour *) 0 ;
  float result;
  
  SWIG_check_num_args("ca2d::Colour::b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Colour::b",1,"ca2d::Colour *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Colour,0))){
    SWIG_fail_ptr("Colour_b_get",1,SWIGTYPE_p_ca2d__Colour);
  }
  
  result = (float) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Colour_a_set(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Colour *arg1 = (ca2d::Colour *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ca2d::Colour::a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Colour::a",1,"ca2d::Colour *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::Colour::a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Colour,0))){
    SWIG_fail_ptr("Colour_a_set",1,SWIGTYPE_p_ca2d__Colour);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Colour_a_get(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Colour *arg1 = (ca2d::Colour *) 0 ;
  float result;
  
  SWIG_check_num_args("ca2d::Colour::a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Colour::a",1,"ca2d::Colour *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Colour,0))){
    SWIG_fail_ptr("Colour_a_get",1,SWIGTYPE_p_ca2d__Colour);
  }
  
  result = (float) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Colour(void *obj) {
ca2d::Colour *arg1 = (ca2d::Colour *) obj;
delete arg1;
}
static int _proxy__wrap_new_Colour(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Colour);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Colour_attributes[] = {
    { "r", _wrap_Colour_r_get, _wrap_Colour_r_set },
    { "g", _wrap_Colour_g_get, _wrap_Colour_g_set },
    { "b", _wrap_Colour_b_get, _wrap_Colour_b_set },
    { "a", _wrap_Colour_a_get, _wrap_Colour_a_set },
    {0,0,0}
};
static swig_lua_method swig_Colour_methods[]= {
    { "toUintARGB", _wrap_Colour_toUintARGB},
    {0,0}
};
static swig_lua_method swig_Colour_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Colour_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Colour_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Colour_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Colour_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Colour_Sf_SwigStatic = {
    "Colour",
    swig_Colour_Sf_SwigStatic_methods,
    swig_Colour_Sf_SwigStatic_attributes,
    swig_Colour_Sf_SwigStatic_constants,
    swig_Colour_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Colour_bases[] = {0};
static const char *swig_Colour_base_names[] = {0};
static swig_lua_class _wrap_class_Colour = { "Colour", "Colour", &SWIGTYPE_p_ca2d__Colour,_proxy__wrap_new_Colour, swig_delete_Colour, swig_Colour_methods, swig_Colour_attributes, &swig_Colour_Sf_SwigStatic, swig_Colour_meta, swig_Colour_bases, swig_Colour_base_names };

static int _wrap_u8fromfloat(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  uint8_t result;
  
  SWIG_check_num_args("ca2d::u8fromfloat",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ca2d::u8fromfloat",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = ca2d::u8fromfloat(arg1);
  {
    uint8_t * resultptr = new uint8_t((const uint8_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint8_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_floatfromu8(lua_State* L) {
  int SWIG_arg = 0;
  uint8_t arg1 ;
  uint8_t *argp1 ;
  float result;
  
  SWIG_check_num_args("ca2d::floatfromu8",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ca2d::floatfromu8",1,"uint8_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_uint8_t,0))){
    SWIG_fail_ptr("floatfromu8",1,SWIGTYPE_p_uint8_t);
  }
  arg1 = *argp1;
  
  result = (float)ca2d::floatfromu8(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_update(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Camera *arg1 = (ca2d::Camera *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ca2d::Camera::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Camera::update",1,"ca2d::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::Camera::update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Camera,0))){
    SWIG_fail_ptr("Camera_update",1,SWIGTYPE_p_ca2d__Camera);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Camera *arg1 = (ca2d::Camera *) 0 ;
  glm::vec3 *result = 0 ;
  
  SWIG_check_num_args("ca2d::Camera::getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Camera::getPosition",1,"ca2d::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Camera,0))){
    SWIG_fail_ptr("Camera_getPosition",1,SWIGTYPE_p_ca2d__Camera);
  }
  
  result = (glm::vec3 *) &((ca2d::Camera const *)arg1)->getPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__vec3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Camera *arg1 = (ca2d::Camera *) 0 ;
  glm::vec3 *arg2 = 0 ;
  
  SWIG_check_num_args("ca2d::Camera::setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Camera::setPosition",1,"ca2d::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::Camera::setPosition",2,"glm::vec3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Camera,0))){
    SWIG_fail_ptr("Camera_setPosition",1,SWIGTYPE_p_ca2d__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_glm__vec3,0))){
    SWIG_fail_ptr("Camera_setPosition",2,SWIGTYPE_p_glm__vec3);
  }
  
  (arg1)->setPosition((glm::vec3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Camera *arg1 = (ca2d::Camera *) 0 ;
  glm::quat *result = 0 ;
  
  SWIG_check_num_args("ca2d::Camera::getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Camera::getRotation",1,"ca2d::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Camera,0))){
    SWIG_fail_ptr("Camera_getRotation",1,SWIGTYPE_p_ca2d__Camera);
  }
  
  result = (glm::quat *) &((ca2d::Camera const *)arg1)->getRotation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__quat,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Camera *arg1 = (ca2d::Camera *) 0 ;
  glm::quat *arg2 = 0 ;
  
  SWIG_check_num_args("ca2d::Camera::setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Camera::setRotation",1,"ca2d::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::Camera::setRotation",2,"glm::quat const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Camera,0))){
    SWIG_fail_ptr("Camera_setRotation",1,SWIGTYPE_p_ca2d__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_glm__quat,0))){
    SWIG_fail_ptr("Camera_setRotation",2,SWIGTYPE_p_glm__quat);
  }
  
  (arg1)->setRotation((glm::quat const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getForward(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Camera *arg1 = (ca2d::Camera *) 0 ;
  glm::vec3 *result = 0 ;
  
  SWIG_check_num_args("ca2d::Camera::getForward",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Camera::getForward",1,"ca2d::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Camera,0))){
    SWIG_fail_ptr("Camera_getForward",1,SWIGTYPE_p_ca2d__Camera);
  }
  
  result = (glm::vec3 *) &((ca2d::Camera const *)arg1)->getForward();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__vec3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getUp(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Camera *arg1 = (ca2d::Camera *) 0 ;
  glm::vec3 *result = 0 ;
  
  SWIG_check_num_args("ca2d::Camera::getUp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Camera::getUp",1,"ca2d::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Camera,0))){
    SWIG_fail_ptr("Camera_getUp",1,SWIGTYPE_p_ca2d__Camera);
  }
  
  result = (glm::vec3 *) &((ca2d::Camera const *)arg1)->getUp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__vec3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getRight(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Camera *arg1 = (ca2d::Camera *) 0 ;
  glm::vec3 *result = 0 ;
  
  SWIG_check_num_args("ca2d::Camera::getRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Camera::getRight",1,"ca2d::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Camera,0))){
    SWIG_fail_ptr("Camera_getRight",1,SWIGTYPE_p_ca2d__Camera);
  }
  
  result = (glm::vec3 *) &((ca2d::Camera const *)arg1)->getRight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__vec3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getProjection(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Camera *arg1 = (ca2d::Camera *) 0 ;
  glm::mat4 *result = 0 ;
  
  SWIG_check_num_args("ca2d::Camera::getProjection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Camera::getProjection",1,"ca2d::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Camera,0))){
    SWIG_fail_ptr("Camera_getProjection",1,SWIGTYPE_p_ca2d__Camera);
  }
  
  result = (glm::mat4 *) &((ca2d::Camera const *)arg1)->getProjection();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__mat4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getView(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Camera *arg1 = (ca2d::Camera *) 0 ;
  glm::mat4 *result = 0 ;
  
  SWIG_check_num_args("ca2d::Camera::getView",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Camera::getView",1,"ca2d::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Camera,0))){
    SWIG_fail_ptr("Camera_getView",1,SWIGTYPE_p_ca2d__Camera);
  }
  
  result = (glm::mat4 *) &((ca2d::Camera const *)arg1)->getView();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__mat4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getCombined(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Camera *arg1 = (ca2d::Camera *) 0 ;
  glm::mat4 *result = 0 ;
  
  SWIG_check_num_args("ca2d::Camera::getCombined",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Camera::getCombined",1,"ca2d::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Camera,0))){
    SWIG_fail_ptr("Camera_getCombined",1,SWIGTYPE_p_ca2d__Camera);
  }
  
  result = (glm::mat4 *) &((ca2d::Camera const *)arg1)->getCombined();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_glm__mat4,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Camera(void *obj) {
ca2d::Camera *arg1 = (ca2d::Camera *) obj;
delete arg1;
}
static swig_lua_attribute swig_Camera_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Camera_methods[]= {
    { "update", _wrap_Camera_update},
    { "getPosition", _wrap_Camera_getPosition},
    { "setPosition", _wrap_Camera_setPosition},
    { "getRotation", _wrap_Camera_getRotation},
    { "setRotation", _wrap_Camera_setRotation},
    { "getForward", _wrap_Camera_getForward},
    { "getUp", _wrap_Camera_getUp},
    { "getRight", _wrap_Camera_getRight},
    { "getProjection", _wrap_Camera_getProjection},
    { "getView", _wrap_Camera_getView},
    { "getCombined", _wrap_Camera_getCombined},
    {0,0}
};
static swig_lua_method swig_Camera_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Camera_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Camera_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Camera_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Camera_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Camera_Sf_SwigStatic = {
    "Camera",
    swig_Camera_Sf_SwigStatic_methods,
    swig_Camera_Sf_SwigStatic_attributes,
    swig_Camera_Sf_SwigStatic_constants,
    swig_Camera_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Camera_bases[] = {0};
static const char *swig_Camera_base_names[] = {0};
static swig_lua_class _wrap_class_Camera = { "Camera", "Camera", &SWIGTYPE_p_ca2d__Camera,0, swig_delete_Camera, swig_Camera_methods, swig_Camera_attributes, &swig_Camera_Sf_SwigStatic, swig_Camera_meta, swig_Camera_bases, swig_Camera_base_names };

static int _wrap_Vertex2D_pos_set(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Vertex2D *arg1 = (ca2d::Vertex2D *) 0 ;
  glm::vec3 arg2 ;
  glm::vec3 *argp2 ;
  
  SWIG_check_num_args("ca2d::Vertex2D::pos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Vertex2D::pos",1,"ca2d::Vertex2D *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::Vertex2D::pos",2,"glm::vec3");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Vertex2D,0))){
    SWIG_fail_ptr("Vertex2D_pos_set",1,SWIGTYPE_p_ca2d__Vertex2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_glm__vec3,0))){
    SWIG_fail_ptr("Vertex2D_pos_set",2,SWIGTYPE_p_glm__vec3);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->pos = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vertex2D_pos_get(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Vertex2D *arg1 = (ca2d::Vertex2D *) 0 ;
  glm::vec3 result;
  
  SWIG_check_num_args("ca2d::Vertex2D::pos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Vertex2D::pos",1,"ca2d::Vertex2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Vertex2D,0))){
    SWIG_fail_ptr("Vertex2D_pos_get",1,SWIGTYPE_p_ca2d__Vertex2D);
  }
  
  result =  ((arg1)->pos);
  {
    glm::vec3 * resultptr = new glm::vec3((const glm::vec3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vertex2D_uv_set(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Vertex2D *arg1 = (ca2d::Vertex2D *) 0 ;
  glm::vec2 arg2 ;
  glm::vec2 *argp2 ;
  
  SWIG_check_num_args("ca2d::Vertex2D::uv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Vertex2D::uv",1,"ca2d::Vertex2D *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::Vertex2D::uv",2,"glm::vec2");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Vertex2D,0))){
    SWIG_fail_ptr("Vertex2D_uv_set",1,SWIGTYPE_p_ca2d__Vertex2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_glm__vec2,0))){
    SWIG_fail_ptr("Vertex2D_uv_set",2,SWIGTYPE_p_glm__vec2);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->uv = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vertex2D_uv_get(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Vertex2D *arg1 = (ca2d::Vertex2D *) 0 ;
  glm::vec2 result;
  
  SWIG_check_num_args("ca2d::Vertex2D::uv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::Vertex2D::uv",1,"ca2d::Vertex2D *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__Vertex2D,0))){
    SWIG_fail_ptr("Vertex2D_uv_get",1,SWIGTYPE_p_ca2d__Vertex2D);
  }
  
  result =  ((arg1)->uv);
  {
    glm::vec2 * resultptr = new glm::vec2((const glm::vec2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_glm__vec2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vertex2D(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::Vertex2D *result = 0 ;
  
  SWIG_check_num_args("ca2d::Vertex2D::Vertex2D",0,0)
  result = (ca2d::Vertex2D *)new ca2d::Vertex2D();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__Vertex2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vertex2D(void *obj) {
ca2d::Vertex2D *arg1 = (ca2d::Vertex2D *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vertex2D(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vertex2D);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vertex2D_attributes[] = {
    { "pos", _wrap_Vertex2D_pos_get, _wrap_Vertex2D_pos_set },
    { "uv", _wrap_Vertex2D_uv_get, _wrap_Vertex2D_uv_set },
    {0,0,0}
};
static swig_lua_method swig_Vertex2D_methods[]= {
    {0,0}
};
static swig_lua_method swig_Vertex2D_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Vertex2D_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vertex2D_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vertex2D_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vertex2D_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vertex2D_Sf_SwigStatic = {
    "Vertex2D",
    swig_Vertex2D_Sf_SwigStatic_methods,
    swig_Vertex2D_Sf_SwigStatic_attributes,
    swig_Vertex2D_Sf_SwigStatic_constants,
    swig_Vertex2D_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vertex2D_bases[] = {0};
static const char *swig_Vertex2D_base_names[] = {0};
static swig_lua_class _wrap_class_Vertex2D = { "Vertex2D", "Vertex2D", &SWIGTYPE_p_ca2d__Vertex2D,_proxy__wrap_new_Vertex2D, swig_delete_Vertex2D, swig_Vertex2D_methods, swig_Vertex2D_attributes, &swig_Vertex2D_Sf_SwigStatic, swig_Vertex2D_meta, swig_Vertex2D_bases, swig_Vertex2D_base_names };

static int _wrap_new_File__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::File *result = 0 ;
  
  SWIG_check_num_args("ca2d::File::File",0,0)
  result = (ca2d::File *)new ca2d::File();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__File,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_File__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  ca2d::File *result = 0 ;
  
  SWIG_check_num_args("ca2d::File::File",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ca2d::File::File",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (ca2d::File *)new ca2d::File((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__File,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_File(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_File__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_File__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_File'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ca2d::File::File()\n"
    "    ca2d::File::File(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_File_load(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::File *arg1 = (ca2d::File *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ca2d::File::load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::File::load",1,"ca2d::File *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::File::load",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__File,0))){
    SWIG_fail_ptr("File_load",1,SWIGTYPE_p_ca2d__File);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->load((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_File_unload(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::File *arg1 = (ca2d::File *) 0 ;
  
  SWIG_check_num_args("ca2d::File::unload",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::File::unload",1,"ca2d::File *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__File,0))){
    SWIG_fail_ptr("File_unload",1,SWIGTYPE_p_ca2d__File);
  }
  
  (arg1)->unload();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_File_getContents(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::File *arg1 = (ca2d::File *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ca2d::File::getContents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::File::getContents",1,"ca2d::File const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__File,0))){
    SWIG_fail_ptr("File_getContents",1,SWIGTYPE_p_ca2d__File);
  }
  
  result = ((ca2d::File const *)arg1)->getContents();
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_File_exists__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::File *arg1 = (ca2d::File *) 0 ;
  bool result;
  
  SWIG_check_num_args("ca2d::File::exists",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::File::exists",1,"ca2d::File const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__File,0))){
    SWIG_fail_ptr("File_exists",1,SWIGTYPE_p_ca2d__File);
  }
  
  result = (bool)((ca2d::File const *)arg1)->exists();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_File_exists__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ca2d::File::exists",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("ca2d::File::exists",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)ca2d::File::exists((char const *)arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_File_exists(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ca2d__File, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_File_exists__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_File_exists__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'File_exists'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ca2d::File::exists() const\n"
    "    ca2d::File::exists(char const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_File(void *obj) {
ca2d::File *arg1 = (ca2d::File *) obj;
delete arg1;
}
static int _proxy__wrap_new_File(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_File);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_File_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_File_methods[]= {
    { "load", _wrap_File_load},
    { "unload", _wrap_File_unload},
    { "getContents", _wrap_File_getContents},
    {0,0}
};
static swig_lua_method swig_File_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_File_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_File_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_File_Sf_SwigStatic_methods[]= {
    { "exists", _wrap_File_exists},
    {0,0}
};
static swig_lua_class* swig_File_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_File_Sf_SwigStatic = {
    "File",
    swig_File_Sf_SwigStatic_methods,
    swig_File_Sf_SwigStatic_attributes,
    swig_File_Sf_SwigStatic_constants,
    swig_File_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_File_bases[] = {0};
static const char *swig_File_base_names[] = {0};
static swig_lua_class _wrap_class_File = { "File", "File", &SWIGTYPE_p_ca2d__File,_proxy__wrap_new_File, swig_delete_File, swig_File_methods, swig_File_attributes, &swig_File_Sf_SwigStatic, swig_File_meta, swig_File_bases, swig_File_base_names };

static int _wrap_new_LuaEngine(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaEngine *result = 0 ;
  
  SWIG_check_num_args("ca2d::LuaEngine::LuaEngine",0,0)
  result = (ca2d::LuaEngine *)new ca2d::LuaEngine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__LuaEngine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaEngine_getLuaState(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaEngine *arg1 = (ca2d::LuaEngine *) 0 ;
  lua_State *result = 0 ;
  
  SWIG_check_num_args("ca2d::LuaEngine::getLuaState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaEngine::getLuaState",1,"ca2d::LuaEngine const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaEngine,0))){
    SWIG_fail_ptr("LuaEngine_getLuaState",1,SWIGTYPE_p_ca2d__LuaEngine);
  }
  
  result = (lua_State *)((ca2d::LuaEngine const *)arg1)->getLuaState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_lua_State,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaEngine_loadStandardLibs(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaEngine *arg1 = (ca2d::LuaEngine *) 0 ;
  
  SWIG_check_num_args("ca2d::LuaEngine::loadStandardLibs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaEngine::loadStandardLibs",1,"ca2d::LuaEngine *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaEngine,0))){
    SWIG_fail_ptr("LuaEngine_loadStandardLibs",1,SWIGTYPE_p_ca2d__LuaEngine);
  }
  
  (arg1)->loadStandardLibs();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaEngine_prompt(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaEngine *arg1 = (ca2d::LuaEngine *) 0 ;
  std::mutex *arg2 = (std::mutex *) 0 ;
  
  SWIG_check_num_args("ca2d::LuaEngine::prompt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaEngine::prompt",1,"ca2d::LuaEngine *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ca2d::LuaEngine::prompt",2,"std::mutex *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaEngine,0))){
    SWIG_fail_ptr("LuaEngine_prompt",1,SWIGTYPE_p_ca2d__LuaEngine);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__mutex,0))){
    SWIG_fail_ptr("LuaEngine_prompt",2,SWIGTYPE_p_std__mutex);
  }
  
  (arg1)->prompt(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaEngine_require(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaEngine *arg1 = (ca2d::LuaEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ca2d::LuaEngine::require",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaEngine::require",1,"ca2d::LuaEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::LuaEngine::require",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaEngine,0))){
    SWIG_fail_ptr("LuaEngine_require",1,SWIGTYPE_p_ca2d__LuaEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->require((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaEngine_dofile(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaEngine *arg1 = (ca2d::LuaEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ca2d::LuaEngine::dofile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaEngine::dofile",1,"ca2d::LuaEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::LuaEngine::dofile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaEngine,0))){
    SWIG_fail_ptr("LuaEngine_dofile",1,SWIGTYPE_p_ca2d__LuaEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->dofile((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaEngine_runCommand(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaEngine *arg1 = (ca2d::LuaEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("ca2d::LuaEngine::runCommand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaEngine::runCommand",1,"ca2d::LuaEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::LuaEngine::runCommand",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaEngine,0))){
    SWIG_fail_ptr("LuaEngine_runCommand",1,SWIGTYPE_p_ca2d__LuaEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)(arg1)->runCommand((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaEngine_getGlobal(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaEngine *arg1 = (ca2d::LuaEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  LuaValue result;
  
  SWIG_check_num_args("ca2d::LuaEngine::getGlobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaEngine::getGlobal",1,"ca2d::LuaEngine const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::LuaEngine::getGlobal",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaEngine,0))){
    SWIG_fail_ptr("LuaEngine_getGlobal",1,SWIGTYPE_p_ca2d__LuaEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = ((ca2d::LuaEngine const *)arg1)->getGlobal((char const *)arg2);
  {
    LuaValue * resultptr = new LuaValue((const LuaValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_LuaValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaEngine_setGlobal(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaEngine *arg1 = (ca2d::LuaEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = (void *) 0 ;
  
  SWIG_check_num_args("ca2d::LuaEngine::setGlobal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaEngine::setGlobal",1,"ca2d::LuaEngine *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("ca2d::LuaEngine::setGlobal",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("ca2d::LuaEngine::setGlobal",3,"char const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("ca2d::LuaEngine::setGlobal",4,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaEngine,0))){
    SWIG_fail_ptr("LuaEngine_setGlobal",1,SWIGTYPE_p_ca2d__LuaEngine);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"LuaEngine_setGlobal");
  (arg1)->setGlobal((char const *)arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaEngine_fromLuaState(lua_State* L) {
  int SWIG_arg = 0;
  lua_State *arg1 = (lua_State *) 0 ;
  ca2d::LuaEngine *result = 0 ;
  
  arg1 = L;
  SWIG_check_num_args("ca2d::LuaEngine::fromLuaState",0,0)
  result = (ca2d::LuaEngine *)ca2d::LuaEngine::fromLuaState(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__LuaEngine,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaEngine(void *obj) {
ca2d::LuaEngine *arg1 = (ca2d::LuaEngine *) obj;
delete arg1;
}
static int _proxy__wrap_new_LuaEngine(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LuaEngine);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LuaEngine_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaEngine_methods[]= {
    { "getLuaState", _wrap_LuaEngine_getLuaState},
    { "loadStandardLibs", _wrap_LuaEngine_loadStandardLibs},
    { "prompt", _wrap_LuaEngine_prompt},
    { "require", _wrap_LuaEngine_require},
    { "dofile", _wrap_LuaEngine_dofile},
    { "runCommand", _wrap_LuaEngine_runCommand},
    { "getGlobal", _wrap_LuaEngine_getGlobal},
    { "setGlobal", _wrap_LuaEngine_setGlobal},
    {0,0}
};
static swig_lua_method swig_LuaEngine_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LuaEngine_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LuaEngine_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LuaEngine_Sf_SwigStatic_methods[]= {
    { "fromLuaState", _wrap_LuaEngine_fromLuaState},
    {0,0}
};
static swig_lua_class* swig_LuaEngine_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LuaEngine_Sf_SwigStatic = {
    "LuaEngine",
    swig_LuaEngine_Sf_SwigStatic_methods,
    swig_LuaEngine_Sf_SwigStatic_attributes,
    swig_LuaEngine_Sf_SwigStatic_constants,
    swig_LuaEngine_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LuaEngine_bases[] = {0};
static const char *swig_LuaEngine_base_names[] = {0};
static swig_lua_class _wrap_class_LuaEngine = { "LuaEngine", "LuaEngine", &SWIGTYPE_p_ca2d__LuaEngine,_proxy__wrap_new_LuaEngine, swig_delete_LuaEngine, swig_LuaEngine_methods, swig_LuaEngine_attributes, &swig_LuaEngine_Sf_SwigStatic, swig_LuaEngine_meta, swig_LuaEngine_bases, swig_LuaEngine_base_names };

static int _wrap_passArgs(lua_State* L) {
  int SWIG_arg = 0;
  lua_State *arg1 = (lua_State *) 0 ;
  
  arg1 = L;
  SWIG_check_num_args("ca2d::passArgs",0,0)
  ca2d::passArgs(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LuaReference__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaReference *result = 0 ;
  
  SWIG_check_num_args("ca2d::LuaReference::LuaReference",0,0)
  result = (ca2d::LuaReference *)new ca2d::LuaReference();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__LuaReference,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LuaReference__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  lua_State *arg2 = (lua_State *) 0 ;
  ca2d::LuaReference *result = 0 ;
  
  arg2 = L;
  SWIG_check_num_args("ca2d::LuaReference::LuaReference",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ca2d::LuaReference::LuaReference",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (ca2d::LuaReference *)new ca2d::LuaReference(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__LuaReference,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LuaReference(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_LuaReference__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_LuaReference__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_LuaReference'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ca2d::LuaReference::LuaReference()\n"
    "    ca2d::LuaReference::LuaReference(int,lua_State *)\n");
  lua_error(L);return 0;
}


static int _wrap_LuaReference_getReference(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaReference *arg1 = (ca2d::LuaReference *) 0 ;
  int result;
  
  SWIG_check_num_args("ca2d::LuaReference::getReference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaReference::getReference",1,"ca2d::LuaReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaReference,0))){
    SWIG_fail_ptr("LuaReference_getReference",1,SWIGTYPE_p_ca2d__LuaReference);
  }
  
  result = (int)((ca2d::LuaReference const *)arg1)->getReference();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaReference_getLuaState(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaReference *arg1 = (ca2d::LuaReference *) 0 ;
  lua_State *result = 0 ;
  
  SWIG_check_num_args("ca2d::LuaReference::getLuaState",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaReference::getLuaState",1,"ca2d::LuaReference const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaReference,0))){
    SWIG_fail_ptr("LuaReference_getLuaState",1,SWIGTYPE_p_ca2d__LuaReference);
  }
  
  result = (lua_State *)((ca2d::LuaReference const *)arg1)->getLuaState();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_lua_State,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaReference(void *obj) {
ca2d::LuaReference *arg1 = (ca2d::LuaReference *) obj;
delete arg1;
}
static int _proxy__wrap_new_LuaReference(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LuaReference);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LuaReference_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_LuaReference_methods[]= {
    { "getReference", _wrap_LuaReference_getReference},
    { "getLuaState", _wrap_LuaReference_getLuaState},
    {0,0}
};
static swig_lua_method swig_LuaReference_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LuaReference_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LuaReference_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LuaReference_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_LuaReference_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LuaReference_Sf_SwigStatic = {
    "LuaReference",
    swig_LuaReference_Sf_SwigStatic_methods,
    swig_LuaReference_Sf_SwigStatic_attributes,
    swig_LuaReference_Sf_SwigStatic_constants,
    swig_LuaReference_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LuaReference_bases[] = {0};
static const char *swig_LuaReference_base_names[] = {0};
static swig_lua_class _wrap_class_LuaReference = { "LuaReference", "LuaReference", &SWIGTYPE_p_ca2d__LuaReference,_proxy__wrap_new_LuaReference, swig_delete_LuaReference, swig_LuaReference_methods, swig_LuaReference_attributes, &swig_LuaReference_Sf_SwigStatic, swig_LuaReference_meta, swig_LuaReference_bases, swig_LuaReference_base_names };

static int _wrap_LuaValue_type_set(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaValue *arg1 = (ca2d::LuaValue *) 0 ;
  ca2d::LuaValueType arg2 ;
  
  SWIG_check_num_args("ca2d::LuaValue::type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaValue::type",1,"ca2d::LuaValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::LuaValue::type",2,"ca2d::LuaValueType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaValue,0))){
    SWIG_fail_ptr("LuaValue_type_set",1,SWIGTYPE_p_ca2d__LuaValue);
  }
  
  arg2 = (ca2d::LuaValueType)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->type = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaValue_type_get(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaValue *arg1 = (ca2d::LuaValue *) 0 ;
  ca2d::LuaValueType result;
  
  SWIG_check_num_args("ca2d::LuaValue::type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaValue::type",1,"ca2d::LuaValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaValue,0))){
    SWIG_fail_ptr("LuaValue_type_get",1,SWIGTYPE_p_ca2d__LuaValue);
  }
  
  result = (ca2d::LuaValueType) ((arg1)->type);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaValue_number_set(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaValue *arg1 = (ca2d::LuaValue *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("ca2d::LuaValue::number",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaValue::number",1,"ca2d::LuaValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ca2d::LuaValue::number",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaValue,0))){
    SWIG_fail_ptr("LuaValue_number_set",1,SWIGTYPE_p_ca2d__LuaValue);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  if (arg1) (arg1)->number = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaValue_number_get(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaValue *arg1 = (ca2d::LuaValue *) 0 ;
  double result;
  
  SWIG_check_num_args("ca2d::LuaValue::number",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaValue::number",1,"ca2d::LuaValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaValue,0))){
    SWIG_fail_ptr("LuaValue_number_get",1,SWIGTYPE_p_ca2d__LuaValue);
  }
  
  result = (double) ((arg1)->number);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaValue_string_set(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaValue *arg1 = (ca2d::LuaValue *) 0 ;
  std::string arg2 ;
  std::string *argp2 ;
  
  SWIG_check_num_args("ca2d::LuaValue::string",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaValue::string",1,"ca2d::LuaValue *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ca2d::LuaValue::string",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaValue,0))){
    SWIG_fail_ptr("LuaValue_string_set",1,SWIGTYPE_p_ca2d__LuaValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("LuaValue_string_set",2,SWIGTYPE_p_std__string);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->string = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaValue_string_get(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaValue *arg1 = (ca2d::LuaValue *) 0 ;
  std::string result;
  
  SWIG_check_num_args("ca2d::LuaValue::string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaValue::string",1,"ca2d::LuaValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaValue,0))){
    SWIG_fail_ptr("LuaValue_string_get",1,SWIGTYPE_p_ca2d__LuaValue);
  }
  
  result =  ((arg1)->string);
  {
    std::string * resultptr = new std::string((const std::string &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__string,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaValue_boolean_set(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaValue *arg1 = (ca2d::LuaValue *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ca2d::LuaValue::boolean",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaValue::boolean",1,"ca2d::LuaValue *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ca2d::LuaValue::boolean",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaValue,0))){
    SWIG_fail_ptr("LuaValue_boolean_set",1,SWIGTYPE_p_ca2d__LuaValue);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->boolean = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaValue_boolean_get(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaValue *arg1 = (ca2d::LuaValue *) 0 ;
  bool result;
  
  SWIG_check_num_args("ca2d::LuaValue::boolean",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaValue::boolean",1,"ca2d::LuaValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaValue,0))){
    SWIG_fail_ptr("LuaValue_boolean_get",1,SWIGTYPE_p_ca2d__LuaValue);
  }
  
  result = (bool) ((arg1)->boolean);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaValue_reference_set(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaValue *arg1 = (ca2d::LuaValue *) 0 ;
  ca2d::LuaReference *arg2 = (ca2d::LuaReference *) 0 ;
  
  SWIG_check_num_args("ca2d::LuaValue::reference",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaValue::reference",1,"ca2d::LuaValue *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("ca2d::LuaValue::reference",2,"ca2d::LuaReference *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaValue,0))){
    SWIG_fail_ptr("LuaValue_reference_set",1,SWIGTYPE_p_ca2d__LuaValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ca2d__LuaReference,0))){
    SWIG_fail_ptr("LuaValue_reference_set",2,SWIGTYPE_p_ca2d__LuaReference);
  }
  
  if (arg1) (arg1)->reference = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaValue_reference_get(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaValue *arg1 = (ca2d::LuaValue *) 0 ;
  ca2d::LuaReference *result = 0 ;
  
  SWIG_check_num_args("ca2d::LuaValue::reference",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ca2d::LuaValue::reference",1,"ca2d::LuaValue *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ca2d__LuaValue,0))){
    SWIG_fail_ptr("LuaValue_reference_get",1,SWIGTYPE_p_ca2d__LuaValue);
  }
  
  result = (ca2d::LuaReference *)& ((arg1)->reference);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__LuaReference,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LuaValue_fromStack(lua_State* L) {
  int SWIG_arg = 0;
  lua_State *arg1 = (lua_State *) 0 ;
  int arg2 ;
  ca2d::LuaValue result;
  
  arg1 = L;
  SWIG_check_num_args("ca2d::LuaValue::fromStack",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ca2d::LuaValue::fromStack",1,"int");
  arg2 = (int)lua_tonumber(L, 1);
  result = ca2d::LuaValue::fromStack(arg1,arg2);
  {
    ca2d::LuaValue * resultptr = new ca2d::LuaValue((const ca2d::LuaValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ca2d__LuaValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_LuaValue(lua_State* L) {
  int SWIG_arg = 0;
  ca2d::LuaValue *result = 0 ;
  
  SWIG_check_num_args("ca2d::LuaValue::LuaValue",0,0)
  result = (ca2d::LuaValue *)new ca2d::LuaValue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ca2d__LuaValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LuaValue(void *obj) {
ca2d::LuaValue *arg1 = (ca2d::LuaValue *) obj;
delete arg1;
}
static int _proxy__wrap_new_LuaValue(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_LuaValue);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_LuaValue_attributes[] = {
    { "type", _wrap_LuaValue_type_get, _wrap_LuaValue_type_set },
    { "number", _wrap_LuaValue_number_get, _wrap_LuaValue_number_set },
    { "string", _wrap_LuaValue_string_get, _wrap_LuaValue_string_set },
    { "boolean", _wrap_LuaValue_boolean_get, _wrap_LuaValue_boolean_set },
    { "reference", _wrap_LuaValue_reference_get, _wrap_LuaValue_reference_set },
    {0,0,0}
};
static swig_lua_method swig_LuaValue_methods[]= {
    {0,0}
};
static swig_lua_method swig_LuaValue_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_LuaValue_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_LuaValue_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_LuaValue_Sf_SwigStatic_methods[]= {
    { "fromStack", _wrap_LuaValue_fromStack},
    {0,0}
};
static swig_lua_class* swig_LuaValue_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_LuaValue_Sf_SwigStatic = {
    "LuaValue",
    swig_LuaValue_Sf_SwigStatic_methods,
    swig_LuaValue_Sf_SwigStatic_attributes,
    swig_LuaValue_Sf_SwigStatic_constants,
    swig_LuaValue_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_LuaValue_bases[] = {0};
static const char *swig_LuaValue_base_names[] = {0};
static swig_lua_class _wrap_class_LuaValue = { "LuaValue", "LuaValue", &SWIGTYPE_p_ca2d__LuaValue,_proxy__wrap_new_LuaValue, swig_delete_LuaValue, swig_LuaValue_methods, swig_LuaValue_attributes, &swig_LuaValue_Sf_SwigStatic, swig_LuaValue_meta, swig_LuaValue_bases, swig_LuaValue_base_names };

static int _wrap_new_SceneEdit(lua_State* L) {
  int SWIG_arg = 0;
  SceneEdit *result = 0 ;
  
  SWIG_check_num_args("SceneEdit::SceneEdit",0,0)
  result = (SceneEdit *)new SceneEdit();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SceneEdit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneEdit_update(lua_State* L) {
  int SWIG_arg = 0;
  SceneEdit *arg1 = (SceneEdit *) 0 ;
  double arg2 ;
  
  SWIG_check_num_args("SceneEdit::update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SceneEdit::update",1,"SceneEdit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("SceneEdit::update",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SceneEdit,0))){
    SWIG_fail_ptr("SceneEdit_update",1,SWIGTYPE_p_SceneEdit);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SceneEdit_render(lua_State* L) {
  int SWIG_arg = 0;
  SceneEdit *arg1 = (SceneEdit *) 0 ;
  
  SWIG_check_num_args("SceneEdit::render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("SceneEdit::render",1,"SceneEdit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SceneEdit,0))){
    SWIG_fail_ptr("SceneEdit_render",1,SWIGTYPE_p_SceneEdit);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SceneEdit(void *obj) {
SceneEdit *arg1 = (SceneEdit *) obj;
delete arg1;
}
static int _proxy__wrap_new_SceneEdit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SceneEdit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SceneEdit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SceneEdit_methods[]= {
    { "update", _wrap_SceneEdit_update},
    { "render", _wrap_SceneEdit_render},
    {0,0}
};
static swig_lua_method swig_SceneEdit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SceneEdit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SceneEdit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SceneEdit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SceneEdit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SceneEdit_Sf_SwigStatic = {
    "SceneEdit",
    swig_SceneEdit_Sf_SwigStatic_methods,
    swig_SceneEdit_Sf_SwigStatic_attributes,
    swig_SceneEdit_Sf_SwigStatic_constants,
    swig_SceneEdit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SceneEdit_bases[] = {0,0};
static const char *swig_SceneEdit_base_names[] = {"ca2d::Game *",0};
static swig_lua_class _wrap_class_SceneEdit = { "SceneEdit", "SceneEdit", &SWIGTYPE_p_SceneEdit,_proxy__wrap_new_SceneEdit, swig_delete_SceneEdit, swig_SceneEdit_methods, swig_SceneEdit_attributes, &swig_SceneEdit_Sf_SwigStatic, swig_SceneEdit_meta, swig_SceneEdit_bases, swig_SceneEdit_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("COMENT_NUM_BITS", 32)},
    {SWIG_LUA_CONSTTAB_INT("NIL", ca2d::LuaValueType::NIL)},
    {SWIG_LUA_CONSTTAB_INT("NUMBER", ca2d::LuaValueType::NUMBER)},
    {SWIG_LUA_CONSTTAB_INT("STRING", ca2d::LuaValueType::STRING)},
    {SWIG_LUA_CONSTTAB_INT("BOOLEAN", ca2d::LuaValueType::BOOLEAN)},
    {SWIG_LUA_CONSTTAB_INT("TABLE", ca2d::LuaValueType::TABLE)},
    {SWIG_LUA_CONSTTAB_INT("FUNCTION", ca2d::LuaValueType::FUNCTION)},
    {SWIG_LUA_CONSTTAB_INT("USERDATA", ca2d::LuaValueType::USERDATA)},
    {SWIG_LUA_CONSTTAB_INT("THREAD", ca2d::LuaValueType::THREAD)},
    {SWIG_LUA_CONSTTAB_INT("LIGHTUSERDATA", ca2d::LuaValueType::LIGHTUSERDATA)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "compileShader", _wrap_compileShader},
    { "u8fromfloat", _wrap_u8fromfloat},
    { "floatfromu8", _wrap_floatfromu8},
    { "File_exists", _wrap_File_exists},
    { "LuaEngine_fromLuaState", _wrap_LuaEngine_fromLuaState},
    { "passArgs", _wrap_passArgs},
    { "LuaValue_fromStack", _wrap_LuaValue_fromStack},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_Component,
&_wrap_class_Entity,
&_wrap_class_EntityInfo,
&_wrap_class_World,
&_wrap_class_BitcountOutOfRange,
&_wrap_class_BitIndexOutOfBounds,
&_wrap_class_CompMapUnregistered,
&_wrap_class_DeadEntity,
&_wrap_class_IndexOutOfBounds,
&_wrap_class_NotImplemented,
&_wrap_class_UninitialisedEntity,
&_wrap_class_ComponentManager,
&_wrap_class_ComponentTypeManager,
&_wrap_class_EntityManager,
&_wrap_class_GroupManager,
&_wrap_class_Manager,
&_wrap_class_ManagerManager,
&_wrap_class_SystemManager,
&_wrap_class_TagManager,
&_wrap_class_VariableManager,
&_wrap_class_Scene,
&_wrap_class_EntityProcessingSystem,
&_wrap_class_EntitySystem,
&_wrap_class_Game,
&_wrap_class_SDLWindowDeleter,
&_wrap_class_SDLContextDeleter,
&_wrap_class_OpenGLWindow,
&_wrap_class_ConsoleSystem,
&_wrap_class_GLBufferDeleter,
&_wrap_class_GLBufferObject,
&_wrap_class_GLShaderDeleter,
&_wrap_class_GLShader,
&_wrap_class_GLShaderProgramDeleter,
&_wrap_class_GLShaderProgram,
&_wrap_class_GLTexture2D,
&_wrap_class_SDL2Input,
&_wrap_class_SDL2Renderer,
&_wrap_class_Colour,
&_wrap_class_Camera,
&_wrap_class_Vertex2D,
&_wrap_class_File,
&_wrap_class_LuaEngine,
&_wrap_class_LuaReference,
&_wrap_class_LuaValue,
&_wrap_class_SceneEdit,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "engine",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_SceneEditTo_p_ca2d__Game(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ca2d::Game *)  ((SceneEdit *) x));
}
static void *_p_coment__ManagerManagerTo_p_coment__Manager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((coment::Manager *)  ((coment::ManagerManager *) x));
}
static void *_p_coment__SystemManagerTo_p_coment__Manager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((coment::Manager *)  ((coment::SystemManager *) x));
}
static void *_p_coment__TagManagerTo_p_coment__Manager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((coment::Manager *)  ((coment::TagManager *) x));
}
static void *_p_coment__VariableManagerTo_p_coment__Manager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((coment::Manager *)  ((coment::VariableManager *) x));
}
static swig_type_info _swigt__p_BitMask = {"_p_BitMask", "BitMask *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EntityId = {"_p_EntityId", "EntityId *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLenum = {"_p_GLenum", "GLenum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLint = {"_p_GLint", "GLint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLuint = {"_p_GLuint", "GLuint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gwen__Color = {"_p_Gwen__Color", "Gwen::Color *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gwen__Controls__Canvas = {"_p_Gwen__Controls__Canvas", "Gwen::Controls::Canvas *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gwen__Font = {"_p_Gwen__Font", "Gwen::Font *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gwen__Input__SDL2Input = {"_p_Gwen__Input__SDL2Input", "Gwen::Input::SDL2Input *", 0, 0, (void*)&_wrap_class_SDL2Input, 0};
static swig_type_info _swigt__p_Gwen__Point = {"_p_Gwen__Point", "Gwen::Point *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gwen__Rect = {"_p_Gwen__Rect", "Gwen::Rect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gwen__Renderer__SDL2Renderer = {"_p_Gwen__Renderer__SDL2Renderer", "Gwen::Renderer::SDL2Renderer *", 0, 0, (void*)&_wrap_class_SDL2Renderer, 0};
static swig_type_info _swigt__p_Gwen__String = {"_p_Gwen__String", "Gwen::String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gwen__Texture = {"_p_Gwen__Texture", "Gwen::Texture *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gwen__WindowProvider = {"_p_Gwen__WindowProvider", "Gwen::WindowProvider *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LuaValue = {"_p_LuaValue", "LuaValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Event = {"_p_SDL_Event", "SDL_Event *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_GLContext = {"_p_SDL_GLContext", "SDL_GLContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Window = {"_p_SDL_Window", "SDL_Window *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SceneEdit = {"_p_SceneEdit", "SceneEdit *", 0, 0, (void*)&_wrap_class_SceneEdit, 0};
static swig_type_info _swigt__p_ca2d__Camera = {"_p_ca2d__Camera", "ca2d::Camera *", 0, 0, (void*)&_wrap_class_Camera, 0};
static swig_type_info _swigt__p_ca2d__Colour = {"_p_ca2d__Colour", "ca2d::Colour *", 0, 0, (void*)&_wrap_class_Colour, 0};
static swig_type_info _swigt__p_ca2d__ConsoleSystem = {"_p_ca2d__ConsoleSystem", "ca2d::ConsoleSystem *", 0, 0, (void*)&_wrap_class_ConsoleSystem, 0};
static swig_type_info _swigt__p_ca2d__File = {"_p_ca2d__File", "ca2d::File *", 0, 0, (void*)&_wrap_class_File, 0};
static swig_type_info _swigt__p_ca2d__GLBufferDeleter = {"_p_ca2d__GLBufferDeleter", "ca2d::GLBufferDeleter *", 0, 0, (void*)&_wrap_class_GLBufferDeleter, 0};
static swig_type_info _swigt__p_ca2d__GLBufferObject = {"_p_ca2d__GLBufferObject", "ca2d::GLBufferObject *", 0, 0, (void*)&_wrap_class_GLBufferObject, 0};
static swig_type_info _swigt__p_ca2d__GLShader = {"_p_ca2d__GLShader", "ca2d::GLShader *", 0, 0, (void*)&_wrap_class_GLShader, 0};
static swig_type_info _swigt__p_ca2d__GLShaderDeleter = {"_p_ca2d__GLShaderDeleter", "ca2d::GLShaderDeleter *", 0, 0, (void*)&_wrap_class_GLShaderDeleter, 0};
static swig_type_info _swigt__p_ca2d__GLShaderProgram = {"_p_ca2d__GLShaderProgram", "ca2d::GLShaderProgram *", 0, 0, (void*)&_wrap_class_GLShaderProgram, 0};
static swig_type_info _swigt__p_ca2d__GLShaderProgramDeleter = {"_p_ca2d__GLShaderProgramDeleter", "ca2d::GLShaderProgramDeleter *", 0, 0, (void*)&_wrap_class_GLShaderProgramDeleter, 0};
static swig_type_info _swigt__p_ca2d__GLTexture2D = {"_p_ca2d__GLTexture2D", "ca2d::GLTexture2D *", 0, 0, (void*)&_wrap_class_GLTexture2D, 0};
static swig_type_info _swigt__p_ca2d__Game = {"_p_ca2d__Game", "ca2d::Game *", 0, 0, (void*)&_wrap_class_Game, 0};
static swig_type_info _swigt__p_ca2d__LuaEngine = {"_p_ca2d__LuaEngine", "ca2d::LuaEngine *", 0, 0, (void*)&_wrap_class_LuaEngine, 0};
static swig_type_info _swigt__p_ca2d__LuaReference = {"_p_ca2d__LuaReference", "ca2d::LuaReference *", 0, 0, (void*)&_wrap_class_LuaReference, 0};
static swig_type_info _swigt__p_ca2d__LuaValue = {"_p_ca2d__LuaValue", "ca2d::LuaValue *", 0, 0, (void*)&_wrap_class_LuaValue, 0};
static swig_type_info _swigt__p_ca2d__OpenGLWindow = {"_p_ca2d__OpenGLWindow", "ca2d::OpenGLWindow *", 0, 0, (void*)&_wrap_class_OpenGLWindow, 0};
static swig_type_info _swigt__p_ca2d__SDLContextDeleter = {"_p_ca2d__SDLContextDeleter", "ca2d::SDLContextDeleter *", 0, 0, (void*)&_wrap_class_SDLContextDeleter, 0};
static swig_type_info _swigt__p_ca2d__SDLWindowDeleter = {"_p_ca2d__SDLWindowDeleter", "ca2d::SDLWindowDeleter *", 0, 0, (void*)&_wrap_class_SDLWindowDeleter, 0};
static swig_type_info _swigt__p_ca2d__Vertex2D = {"_p_ca2d__Vertex2D", "ca2d::Vertex2D *", 0, 0, (void*)&_wrap_class_Vertex2D, 0};
static swig_type_info _swigt__p_coment__BitIndexOutOfBounds = {"_p_coment__BitIndexOutOfBounds", "coment::BitIndexOutOfBounds *", 0, 0, (void*)&_wrap_class_BitIndexOutOfBounds, 0};
static swig_type_info _swigt__p_coment__BitcountOutOfRange = {"_p_coment__BitcountOutOfRange", "coment::BitcountOutOfRange *", 0, 0, (void*)&_wrap_class_BitcountOutOfRange, 0};
static swig_type_info _swigt__p_coment__BitsetT_32_t = {"_p_coment__BitsetT_32_t", "coment::BitMask *|coment::Bitset< 32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_coment__CompMapUnregistered = {"_p_coment__CompMapUnregistered", "coment::CompMapUnregistered *", 0, 0, (void*)&_wrap_class_CompMapUnregistered, 0};
static swig_type_info _swigt__p_coment__Component = {"_p_coment__Component", "coment::Component *", 0, 0, (void*)&_wrap_class_Component, 0};
static swig_type_info _swigt__p_coment__ComponentManager = {"_p_coment__ComponentManager", "coment::ComponentManager *", 0, 0, (void*)&_wrap_class_ComponentManager, 0};
static swig_type_info _swigt__p_coment__ComponentTypeManager = {"_p_coment__ComponentTypeManager", "coment::ComponentTypeManager *", 0, 0, (void*)&_wrap_class_ComponentTypeManager, 0};
static swig_type_info _swigt__p_coment__DeadEntity = {"_p_coment__DeadEntity", "coment::DeadEntity *", 0, 0, (void*)&_wrap_class_DeadEntity, 0};
static swig_type_info _swigt__p_coment__Entity = {"_p_coment__Entity", "coment::Entity *", 0, 0, (void*)&_wrap_class_Entity, 0};
static swig_type_info _swigt__p_coment__EntityInfo = {"_p_coment__EntityInfo", "coment::EntityInfo *", 0, 0, (void*)&_wrap_class_EntityInfo, 0};
static swig_type_info _swigt__p_coment__EntityManager = {"_p_coment__EntityManager", "coment::EntityManager *", 0, 0, (void*)&_wrap_class_EntityManager, 0};
static swig_type_info _swigt__p_coment__EntityProcessingSystem = {"_p_coment__EntityProcessingSystem", "coment::EntityProcessingSystem *", 0, 0, (void*)&_wrap_class_EntityProcessingSystem, 0};
static swig_type_info _swigt__p_coment__EntitySystem = {"_p_coment__EntitySystem", "coment::EntitySystem *", 0, 0, (void*)&_wrap_class_EntitySystem, 0};
static swig_type_info _swigt__p_coment__GroupManager = {"_p_coment__GroupManager", "coment::GroupManager *", 0, 0, (void*)&_wrap_class_GroupManager, 0};
static swig_type_info _swigt__p_coment__IndexOutOfBounds = {"_p_coment__IndexOutOfBounds", "coment::IndexOutOfBounds *", 0, 0, (void*)&_wrap_class_IndexOutOfBounds, 0};
static swig_type_info _swigt__p_coment__Manager = {"_p_coment__Manager", "coment::Manager *", 0, 0, (void*)&_wrap_class_Manager, 0};
static swig_type_info _swigt__p_coment__ManagerManager = {"_p_coment__ManagerManager", "coment::ManagerManager *", 0, 0, (void*)&_wrap_class_ManagerManager, 0};
static swig_type_info _swigt__p_coment__NotImplemented = {"_p_coment__NotImplemented", "coment::NotImplemented *", 0, 0, (void*)&_wrap_class_NotImplemented, 0};
static swig_type_info _swigt__p_coment__Scene = {"_p_coment__Scene", "coment::Scene *", 0, 0, (void*)&_wrap_class_Scene, 0};
static swig_type_info _swigt__p_coment__SystemManager = {"_p_coment__SystemManager", "coment::SystemManager *", 0, 0, (void*)&_wrap_class_SystemManager, 0};
static swig_type_info _swigt__p_coment__TagManager = {"_p_coment__TagManager", "coment::TagManager *", 0, 0, (void*)&_wrap_class_TagManager, 0};
static swig_type_info _swigt__p_coment__UninitialisedEntity = {"_p_coment__UninitialisedEntity", "coment::UninitialisedEntity *", 0, 0, (void*)&_wrap_class_UninitialisedEntity, 0};
static swig_type_info _swigt__p_coment__VariableManager = {"_p_coment__VariableManager", "coment::VariableManager *", 0, 0, (void*)&_wrap_class_VariableManager, 0};
static swig_type_info _swigt__p_coment__World = {"_p_coment__World", "coment::World *", 0, 0, (void*)&_wrap_class_World, 0};
static swig_type_info _swigt__p_glm__mat4 = {"_p_glm__mat4", "glm::mat4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_glm__quat = {"_p_glm__quat", "glm::quat *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_glm__vec2 = {"_p_glm__vec2", "glm::vec2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_glm__vec3 = {"_p_glm__vec3", "glm::vec3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_glm__vec4 = {"_p_glm__vec4", "glm::vec4 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_lua_State = {"_p_lua_State", "lua_State *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pointer = {"_p_pointer", "pointer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mutex = {"_p_std__mutex", "std::mutex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_void_t = {"_p_std__shared_ptrT_void_t", "std::shared_ptr< void > *|coment::shared_ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__tr1__unordered_mapT_std__string_int_t = {"_p_std__tr1__unordered_mapT_std__string_int_t", "coment::GroupIDMask *|std::tr1::unordered_map< std::string,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_mapT_std__string_EntitySystem_p_t = {"_p_std__unordered_mapT_std__string_EntitySystem_p_t", "std::unordered_map< std::string,EntitySystem * > *|coment::SystemMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_mapT_std__string_std__shared_ptrT_void_t_t = {"_p_std__unordered_mapT_std__string_std__shared_ptrT_void_t_t", "coment::ComponentBagMap *|std::unordered_map< std::string,std::shared_ptr< void > > *|coment::VariableTypeMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_mapT_std__string_std__vectorT_coment__Entity_t_t = {"_p_std__unordered_mapT_std__string_std__vectorT_coment__Entity_t_t", "std::unordered_map< std::string,std::vector< coment::Entity > > *|coment::EntityArrayMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_mapT_std__string_unsigned_int_t = {"_p_std__unordered_mapT_std__string_unsigned_int_t", "coment::ComponentTypeMap *|std::unordered_map< std::string,unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__unordered_mapT_std__type_index_std__shared_ptrT_coment__Manager_t_t = {"_p_std__unordered_mapT_std__type_index_std__shared_ptrT_coment__Manager_t_t", "coment::ManagerMap *|std::unordered_map< std::type_index,std::shared_ptr< coment::Manager > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_coment__Entity_t = {"_p_std__vectorT_coment__Entity_t", "std::vector< coment::Entity > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32_t = {"_p_uint32_t", "uint32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8_t = {"_p_uint8_t", "uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "coment::ComponentType *|coment::EntityId *|unsigned int *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BitMask,
  &_swigt__p_EntityId,
  &_swigt__p_GLenum,
  &_swigt__p_GLint,
  &_swigt__p_GLuint,
  &_swigt__p_Gwen__Color,
  &_swigt__p_Gwen__Controls__Canvas,
  &_swigt__p_Gwen__Font,
  &_swigt__p_Gwen__Input__SDL2Input,
  &_swigt__p_Gwen__Point,
  &_swigt__p_Gwen__Rect,
  &_swigt__p_Gwen__Renderer__SDL2Renderer,
  &_swigt__p_Gwen__String,
  &_swigt__p_Gwen__Texture,
  &_swigt__p_Gwen__WindowProvider,
  &_swigt__p_LuaValue,
  &_swigt__p_SDL_Event,
  &_swigt__p_SDL_GLContext,
  &_swigt__p_SDL_Window,
  &_swigt__p_SceneEdit,
  &_swigt__p_ca2d__Camera,
  &_swigt__p_ca2d__Colour,
  &_swigt__p_ca2d__ConsoleSystem,
  &_swigt__p_ca2d__File,
  &_swigt__p_ca2d__GLBufferDeleter,
  &_swigt__p_ca2d__GLBufferObject,
  &_swigt__p_ca2d__GLShader,
  &_swigt__p_ca2d__GLShaderDeleter,
  &_swigt__p_ca2d__GLShaderProgram,
  &_swigt__p_ca2d__GLShaderProgramDeleter,
  &_swigt__p_ca2d__GLTexture2D,
  &_swigt__p_ca2d__Game,
  &_swigt__p_ca2d__LuaEngine,
  &_swigt__p_ca2d__LuaReference,
  &_swigt__p_ca2d__LuaValue,
  &_swigt__p_ca2d__OpenGLWindow,
  &_swigt__p_ca2d__SDLContextDeleter,
  &_swigt__p_ca2d__SDLWindowDeleter,
  &_swigt__p_ca2d__Vertex2D,
  &_swigt__p_coment__BitIndexOutOfBounds,
  &_swigt__p_coment__BitcountOutOfRange,
  &_swigt__p_coment__BitsetT_32_t,
  &_swigt__p_coment__CompMapUnregistered,
  &_swigt__p_coment__Component,
  &_swigt__p_coment__ComponentManager,
  &_swigt__p_coment__ComponentTypeManager,
  &_swigt__p_coment__DeadEntity,
  &_swigt__p_coment__Entity,
  &_swigt__p_coment__EntityInfo,
  &_swigt__p_coment__EntityManager,
  &_swigt__p_coment__EntityProcessingSystem,
  &_swigt__p_coment__EntitySystem,
  &_swigt__p_coment__GroupManager,
  &_swigt__p_coment__IndexOutOfBounds,
  &_swigt__p_coment__Manager,
  &_swigt__p_coment__ManagerManager,
  &_swigt__p_coment__NotImplemented,
  &_swigt__p_coment__Scene,
  &_swigt__p_coment__SystemManager,
  &_swigt__p_coment__TagManager,
  &_swigt__p_coment__UninitialisedEntity,
  &_swigt__p_coment__VariableManager,
  &_swigt__p_coment__World,
  &_swigt__p_glm__mat4,
  &_swigt__p_glm__quat,
  &_swigt__p_glm__vec2,
  &_swigt__p_glm__vec3,
  &_swigt__p_glm__vec4,
  &_swigt__p_lua_State,
  &_swigt__p_pointer,
  &_swigt__p_std__mutex,
  &_swigt__p_std__shared_ptrT_void_t,
  &_swigt__p_std__string,
  &_swigt__p_std__tr1__unordered_mapT_std__string_int_t,
  &_swigt__p_std__unordered_mapT_std__string_EntitySystem_p_t,
  &_swigt__p_std__unordered_mapT_std__string_std__shared_ptrT_void_t_t,
  &_swigt__p_std__unordered_mapT_std__string_std__vectorT_coment__Entity_t_t,
  &_swigt__p_std__unordered_mapT_std__string_unsigned_int_t,
  &_swigt__p_std__unordered_mapT_std__type_index_std__shared_ptrT_coment__Manager_t_t,
  &_swigt__p_std__vectorT_coment__Entity_t,
  &_swigt__p_uint32_t,
  &_swigt__p_uint8_t,
  &_swigt__p_unsigned_int,
};

static swig_cast_info _swigc__p_BitMask[] = {  {&_swigt__p_BitMask, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EntityId[] = {  {&_swigt__p_EntityId, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLenum[] = {  {&_swigt__p_GLenum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLint[] = {  {&_swigt__p_GLint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLuint[] = {  {&_swigt__p_GLuint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gwen__Color[] = {  {&_swigt__p_Gwen__Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gwen__Controls__Canvas[] = {  {&_swigt__p_Gwen__Controls__Canvas, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gwen__Font[] = {  {&_swigt__p_Gwen__Font, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gwen__Input__SDL2Input[] = {  {&_swigt__p_Gwen__Input__SDL2Input, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gwen__Point[] = {  {&_swigt__p_Gwen__Point, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gwen__Rect[] = {  {&_swigt__p_Gwen__Rect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gwen__Renderer__SDL2Renderer[] = {  {&_swigt__p_Gwen__Renderer__SDL2Renderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gwen__String[] = {  {&_swigt__p_Gwen__String, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gwen__Texture[] = {  {&_swigt__p_Gwen__Texture, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gwen__WindowProvider[] = {  {&_swigt__p_Gwen__WindowProvider, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaValue[] = {  {&_swigt__p_LuaValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Event[] = {  {&_swigt__p_SDL_Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_GLContext[] = {  {&_swigt__p_SDL_GLContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Window[] = {  {&_swigt__p_SDL_Window, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SceneEdit[] = {  {&_swigt__p_SceneEdit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__Camera[] = {  {&_swigt__p_ca2d__Camera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__Colour[] = {  {&_swigt__p_ca2d__Colour, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__ConsoleSystem[] = {  {&_swigt__p_ca2d__ConsoleSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__File[] = {  {&_swigt__p_ca2d__File, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__GLBufferDeleter[] = {  {&_swigt__p_ca2d__GLBufferDeleter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__GLBufferObject[] = {  {&_swigt__p_ca2d__GLBufferObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__GLShader[] = {  {&_swigt__p_ca2d__GLShader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__GLShaderDeleter[] = {  {&_swigt__p_ca2d__GLShaderDeleter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__GLShaderProgram[] = {  {&_swigt__p_ca2d__GLShaderProgram, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__GLShaderProgramDeleter[] = {  {&_swigt__p_ca2d__GLShaderProgramDeleter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__GLTexture2D[] = {  {&_swigt__p_ca2d__GLTexture2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__Game[] = {  {&_swigt__p_ca2d__Game, 0, 0, 0},  {&_swigt__p_SceneEdit, _p_SceneEditTo_p_ca2d__Game, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__LuaEngine[] = {  {&_swigt__p_ca2d__LuaEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__LuaReference[] = {  {&_swigt__p_ca2d__LuaReference, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__LuaValue[] = {  {&_swigt__p_ca2d__LuaValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__OpenGLWindow[] = {  {&_swigt__p_ca2d__OpenGLWindow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__SDLContextDeleter[] = {  {&_swigt__p_ca2d__SDLContextDeleter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__SDLWindowDeleter[] = {  {&_swigt__p_ca2d__SDLWindowDeleter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ca2d__Vertex2D[] = {  {&_swigt__p_ca2d__Vertex2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__BitIndexOutOfBounds[] = {  {&_swigt__p_coment__BitIndexOutOfBounds, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__BitcountOutOfRange[] = {  {&_swigt__p_coment__BitcountOutOfRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__BitsetT_32_t[] = {  {&_swigt__p_coment__BitsetT_32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__CompMapUnregistered[] = {  {&_swigt__p_coment__CompMapUnregistered, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__Component[] = {  {&_swigt__p_coment__Component, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__ComponentManager[] = {  {&_swigt__p_coment__ComponentManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__ComponentTypeManager[] = {  {&_swigt__p_coment__ComponentTypeManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__DeadEntity[] = {  {&_swigt__p_coment__DeadEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__Entity[] = {  {&_swigt__p_coment__Entity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__EntityInfo[] = {  {&_swigt__p_coment__EntityInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__EntityManager[] = {  {&_swigt__p_coment__EntityManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__EntityProcessingSystem[] = {  {&_swigt__p_coment__EntityProcessingSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__EntitySystem[] = {  {&_swigt__p_coment__EntitySystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__GroupManager[] = {  {&_swigt__p_coment__GroupManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__IndexOutOfBounds[] = {  {&_swigt__p_coment__IndexOutOfBounds, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__Manager[] = {  {&_swigt__p_coment__Manager, 0, 0, 0},  {&_swigt__p_coment__ManagerManager, _p_coment__ManagerManagerTo_p_coment__Manager, 0, 0},  {&_swigt__p_coment__SystemManager, _p_coment__SystemManagerTo_p_coment__Manager, 0, 0},  {&_swigt__p_coment__TagManager, _p_coment__TagManagerTo_p_coment__Manager, 0, 0},  {&_swigt__p_coment__VariableManager, _p_coment__VariableManagerTo_p_coment__Manager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__ManagerManager[] = {  {&_swigt__p_coment__ManagerManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__NotImplemented[] = {  {&_swigt__p_coment__NotImplemented, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__Scene[] = {  {&_swigt__p_coment__Scene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__SystemManager[] = {  {&_swigt__p_coment__SystemManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__TagManager[] = {  {&_swigt__p_coment__TagManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__UninitialisedEntity[] = {  {&_swigt__p_coment__UninitialisedEntity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__VariableManager[] = {  {&_swigt__p_coment__VariableManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_coment__World[] = {  {&_swigt__p_coment__World, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_glm__mat4[] = {  {&_swigt__p_glm__mat4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_glm__quat[] = {  {&_swigt__p_glm__quat, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_glm__vec2[] = {  {&_swigt__p_glm__vec2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_glm__vec3[] = {  {&_swigt__p_glm__vec3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_glm__vec4[] = {  {&_swigt__p_glm__vec4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lua_State[] = {  {&_swigt__p_lua_State, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pointer[] = {  {&_swigt__p_pointer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mutex[] = {  {&_swigt__p_std__mutex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_void_t[] = {  {&_swigt__p_std__shared_ptrT_void_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__tr1__unordered_mapT_std__string_int_t[] = {  {&_swigt__p_std__tr1__unordered_mapT_std__string_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_mapT_std__string_EntitySystem_p_t[] = {  {&_swigt__p_std__unordered_mapT_std__string_EntitySystem_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_mapT_std__string_std__shared_ptrT_void_t_t[] = {  {&_swigt__p_std__unordered_mapT_std__string_std__shared_ptrT_void_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_mapT_std__string_std__vectorT_coment__Entity_t_t[] = {  {&_swigt__p_std__unordered_mapT_std__string_std__vectorT_coment__Entity_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_mapT_std__string_unsigned_int_t[] = {  {&_swigt__p_std__unordered_mapT_std__string_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__unordered_mapT_std__type_index_std__shared_ptrT_coment__Manager_t_t[] = {  {&_swigt__p_std__unordered_mapT_std__type_index_std__shared_ptrT_coment__Manager_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_coment__Entity_t[] = {  {&_swigt__p_std__vectorT_coment__Entity_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32_t[] = {  {&_swigt__p_uint32_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8_t[] = {  {&_swigt__p_uint8_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BitMask,
  _swigc__p_EntityId,
  _swigc__p_GLenum,
  _swigc__p_GLint,
  _swigc__p_GLuint,
  _swigc__p_Gwen__Color,
  _swigc__p_Gwen__Controls__Canvas,
  _swigc__p_Gwen__Font,
  _swigc__p_Gwen__Input__SDL2Input,
  _swigc__p_Gwen__Point,
  _swigc__p_Gwen__Rect,
  _swigc__p_Gwen__Renderer__SDL2Renderer,
  _swigc__p_Gwen__String,
  _swigc__p_Gwen__Texture,
  _swigc__p_Gwen__WindowProvider,
  _swigc__p_LuaValue,
  _swigc__p_SDL_Event,
  _swigc__p_SDL_GLContext,
  _swigc__p_SDL_Window,
  _swigc__p_SceneEdit,
  _swigc__p_ca2d__Camera,
  _swigc__p_ca2d__Colour,
  _swigc__p_ca2d__ConsoleSystem,
  _swigc__p_ca2d__File,
  _swigc__p_ca2d__GLBufferDeleter,
  _swigc__p_ca2d__GLBufferObject,
  _swigc__p_ca2d__GLShader,
  _swigc__p_ca2d__GLShaderDeleter,
  _swigc__p_ca2d__GLShaderProgram,
  _swigc__p_ca2d__GLShaderProgramDeleter,
  _swigc__p_ca2d__GLTexture2D,
  _swigc__p_ca2d__Game,
  _swigc__p_ca2d__LuaEngine,
  _swigc__p_ca2d__LuaReference,
  _swigc__p_ca2d__LuaValue,
  _swigc__p_ca2d__OpenGLWindow,
  _swigc__p_ca2d__SDLContextDeleter,
  _swigc__p_ca2d__SDLWindowDeleter,
  _swigc__p_ca2d__Vertex2D,
  _swigc__p_coment__BitIndexOutOfBounds,
  _swigc__p_coment__BitcountOutOfRange,
  _swigc__p_coment__BitsetT_32_t,
  _swigc__p_coment__CompMapUnregistered,
  _swigc__p_coment__Component,
  _swigc__p_coment__ComponentManager,
  _swigc__p_coment__ComponentTypeManager,
  _swigc__p_coment__DeadEntity,
  _swigc__p_coment__Entity,
  _swigc__p_coment__EntityInfo,
  _swigc__p_coment__EntityManager,
  _swigc__p_coment__EntityProcessingSystem,
  _swigc__p_coment__EntitySystem,
  _swigc__p_coment__GroupManager,
  _swigc__p_coment__IndexOutOfBounds,
  _swigc__p_coment__Manager,
  _swigc__p_coment__ManagerManager,
  _swigc__p_coment__NotImplemented,
  _swigc__p_coment__Scene,
  _swigc__p_coment__SystemManager,
  _swigc__p_coment__TagManager,
  _swigc__p_coment__UninitialisedEntity,
  _swigc__p_coment__VariableManager,
  _swigc__p_coment__World,
  _swigc__p_glm__mat4,
  _swigc__p_glm__quat,
  _swigc__p_glm__vec2,
  _swigc__p_glm__vec3,
  _swigc__p_glm__vec4,
  _swigc__p_lua_State,
  _swigc__p_pointer,
  _swigc__p_std__mutex,
  _swigc__p_std__shared_ptrT_void_t,
  _swigc__p_std__string,
  _swigc__p_std__tr1__unordered_mapT_std__string_int_t,
  _swigc__p_std__unordered_mapT_std__string_EntitySystem_p_t,
  _swigc__p_std__unordered_mapT_std__string_std__shared_ptrT_void_t_t,
  _swigc__p_std__unordered_mapT_std__string_std__vectorT_coment__Entity_t_t,
  _swigc__p_std__unordered_mapT_std__string_unsigned_int_t,
  _swigc__p_std__unordered_mapT_std__type_index_std__shared_ptrT_coment__Manager_t_t,
  _swigc__p_std__vectorT_coment__Entity_t,
  _swigc__p_uint32_t,
  _swigc__p_uint8_t,
  _swigc__p_unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

